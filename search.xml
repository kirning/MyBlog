<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mysql8withNodeJs</title>
      <link href="/2019/07/12/cjxzoi3mi000qjcu99u4risrj/"/>
      <url>/2019/07/12/cjxzoi3mi000qjcu99u4risrj/</url>
      
        <content type="html"><![CDATA[<p><img src=".\mysql8withNodeJs\微信图片_20190712134146.png" alt></p><p>由于mysql8.0的更新，mysql的默认认证方式从 <code>mysql_native_password</code>更换为<code>caching_sha2_password</code>所以导致 <a href="https://github.com/mysqljs/mysql" target="_blank" rel="noopener">mysql</a> 库用不了，报错</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs undefined">(node:11152) UnhandledPromiseRejectionWarning: Error: ER_NOT_SUPPORTED_AUTH_MODE: Client does not support authentication protocol requested by server; consider upgrading MySQL client<br>    at Handshake.Sequence._packetToError (d:\workspace\gendanbao\htmlDemo\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)<br>    at Handshake.ErrorPacket (d:\workspace\gendanbao\htmlDemo\node_modules\mysql\lib\protocol\sequences\Handshake.js:123:18)<br>    at Protocol._parsePacket (d:\workspace\gendanbao\htmlDemo\node_modules\mysql\lib\protocol\Protocol.js:291:23)<br>    at Parser._parsePacket (d:\workspace\gendanbao\htmlDemo\node_modules\mysql\lib\protocol\Parser.js:433:10)<br>    at Parser.write (d:\workspace\gendanbao\htmlDemo\node_modules\mysql\lib\protocol\Parser.js:43:10)<br>    at Protocol.write (d:\workspace\gendanbao\htmlDemo\node_modules\mysql\lib\protocol\Protocol.js:38:16)<br>    at Socket.&lt;anonymous&gt; (d:\workspace\gendanbao\htmlDemo\node_modules\mysql\lib\Connection.js:91:28)<br>    at Socket.&lt;anonymous&gt; (d:\workspace\gendanbao\htmlDemo\node_modules\mysql\lib\Connection.js:525:10)<br>    at Socket.emit (events.js:189:13)<br>    at addChunk (_stream_readable.js:284:12)<br>    --------------------<br>    at Protocol._enqueue (d:\workspace\gendanbao\htmlDemo\node_modules\mysql\lib\protocol\Protocol.js:144:48)<br>    at Protocol.handshake (d:\workspace\gendanbao\htmlDemo\node_modules\mysql\lib\protocol\Protocol.js:51:23)<br>    at PoolConnection.connect (d:\workspace\gendanbao\htmlDemo\node_modules\mysql\lib\Connection.js:119:18)<br>    at Pool.getConnection (d:\workspace\gendanbao\htmlDemo\node_modules\mysql\lib\Pool.js:48:16)<br>    at d:\workspace\gendanbao\htmlDemo\node_modules\typeorm\driver\mysql\MysqlDriver.js:764:18<br>    at new Promise (&lt;anonymous&gt;)<br>    at MysqlDriver.createPool (d:\workspace\gendanbao\htmlDemo\node_modules\typeorm\driver\mysql\MysqlDriver.js:761:16)<br>    at MysqlDriver.&lt;anonymous&gt; (d:\workspace\gendanbao\htmlDemo\node_modules\typeorm\driver\mysql\MysqlDriver.js:274:51)<br>    at step (d:\workspace\gendanbao\htmlDemo\node_modules\tslib\tslib.js:136:27)<br>    at Object.next (d:\workspace\gendanbao\htmlDemo\node_modules\tslib\tslib.js:117:57)<br>warning.js:18<br>(node:11152) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)<br>warning.js:18<br>(node:11152) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.<br></code></pre></td></tr></table></figure><p>截止目前(2019-07-12)为止，官方仅仅提出了修复的<a href="https://github.com/mysqljs/mysql/pull/2233" target="_blank" rel="noopener">PR</a>,但是还没有合并到项目里面去。</p><p>目前能在网上找到的解决方案有两个：</p><ol><li><p>设置数据库，使用原来的认证方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;your_new_password&apos;;<br></code></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>使用 <code>X DevAPI</code> 库替换现在的库</p><p><code>X DevAPI</code> 是 <code>mysql</code> 官方推出的库。<a href="https://dev.mysql.com/doc/dev/connector-nodejs/8.0/" target="_blank" rel="noopener">地址</a></p></li></ol><p>参考：</p><ul><li><a href="https://stackoverflow.com/questions/50093144/mysql-8-0-client-does-not-support-authentication-protocol-requested-by-server" target="_blank" rel="noopener">https://stackoverflow.com/questions/50093144/mysql-8-0-client-does-not-support-authentication-protocol-requested-by-server</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> mysql, mysqljs, node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redux</title>
      <link href="/2019/07/04/cjxzoi3mp000vjcu94izpsjpc/"/>
      <url>/2019/07/04/cjxzoi3mp000vjcu94izpsjpc/</url>
      
        <content type="html"><![CDATA[<p> <img src="https://avatars3.githubusercontent.com/u/31783875?s=460&amp;v=4" alt="img"></p><p>从今天开始，我要坚持每天一篇文章!!!</p><h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><blockquote><p>Redux由Dan Abramov在2015年创建的科技术语。是受2014年Facebook的Flux架构以及函数式编程语言Elm启发。很快，Redux因其简单易学体积小在短时间内成为最热门的前端架构。</p></blockquote><p>以上是百科的介绍，之所以学习Redux，目的就是解决没有关系的组件之间的通信问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript,redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typesafe-actions-zh</title>
      <link href="/2019/07/03/cjxzoi3o6001rjcu9yh9ndao2/"/>
      <url>/2019/07/03/cjxzoi3o6001rjcu9yh9ndao2/</url>
      
        <content type="html"><![CDATA[<div align="center"><br><br># typesafe-actions<br><br>&gt; 主要是学习翻译用的，目前翻译不完整<br><br>Typesafe utilities designed to reduce types <strong>verbosity</strong><br>and <strong>complexity</strong>  in Redux Architecture.<br><br><a id="more"></a><br><br><em>This library is part of the <a href="https://github.com/piotrwitek/react-redux-typescript-guide" target="_blank" rel="noopener">React &amp; Redux TypeScript Guide</a></em> ecosystem :book:<br><br><a href="https://www.npmjs.com/package/typesafe-actions" target="_blank" rel="noopener"><img src="https://img.shields.io/npm/v/typesafe-actions.svg" alt="Latest Stable Version"></a><br><a href="https://www.npmjs.com/package/typesafe-actions" target="_blank" rel="noopener"><img src="https://img.shields.io/npm/dm/typesafe-actions.svg" alt="NPM Downloads"></a><br><a href="https://www.npmjs.com/package/typesafe-actions" target="_blank" rel="noopener"><img src="https://img.shields.io/npm/dt/typesafe-actions.svg" alt="NPM Downloads"></a><br><a href="https://www.npmjs.com/package/typesafe-actions" target="_blank" rel="noopener"><img src="https://img.shields.io/bundlephobia/minzip/typesafe-actions.svg" alt="Bundlephobia Size"></a><br><br><a href="https://semaphoreci.com/piotrekwitek/typesafe-actions" target="_blank" rel="noopener"><img src="https://semaphoreci.com/api/v1/piotrekwitek/typesafe-actions/branches/master/shields_badge.svg" alt="Build Status"></a><br><a href="https://david-dm.org/piotrwitek/typesafe-actions" target="_blank" rel="noopener"><img src="https://david-dm.org/piotrwitek/typesafe-actions/status.svg" alt="Dependencies Status"></a><br><a href="https://david-dm.org/piotrwitek/typesafe-actions?type=peer" target="_blank" rel="noopener"><img src="https://img.shields.io/npm/l/typesafe-actions.svg?style=flat" alt="License"></a><br><a href="https://spectrum.chat/typesafe-actions" target="_blank" rel="noopener"><img src="https://withspectrum.github.io/badge/badge.svg" alt="Join the community on Spectrum"></a><br><br><br><br>:star: <em>Found it useful? Want more updates?</em> <a href="https://github.com/piotrwitek/typesafe-actions/stargazers" target="_blank" rel="noopener"><strong>Show your support by giving a :star:</strong></a><br><br>:tada: <em>Now updated to support <strong>TypeScript v3.5</strong></em> :tada:<br><br><a href="https://www.buymeacoffee.com/zh9guxbA5" target="_blank" rel="noopener"><br>  <img src="https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png" alt="Buy Me a Coffee"><br></a><br><a href="https://www.patreon.com/piotrekwitek" target="_blank" rel="noopener"><br>  <img src="https://c5.patreon.com/external/logo/become_a_patron_button@2x.png" alt="Become a Patron" width="160"><br></a><br><br></div><hr><p><strong>Features</strong></p><ul><li><strong>minimalistic</strong> - according to <code>size-snapshot</code> (Minified: 3.48 KB, Gzipped: 1.03 KB), check also on <a href="https://bundlephobia.com/result?p=typesafe-actions" target="_blank" rel="noopener">bundlephobia</a></li><li><strong>secure and optimized</strong> - no external dependencies, bundled in 3 different formats (<code>cjs</code>, <code>esm</code> and <code>umd</code> for browser) with separate optimized bundles for dev &amp; prod (same as <code>react</code>)</li><li><strong>focus on quality</strong> - complete test-suite for an entire API surface containing regular runtime tests and extra type-tests to guarantee <strong>type soundness</strong> and to prevent regressions in the future TypeScript versions</li><li><strong>focus on performance</strong> - integrated performance benchmarks to guarantee that the computational complexity of types are in check and there are no slow-downs when your application grow <code>npm run benchmark:XXX</code></li></ul><p><strong>Codesandbox links</strong></p><ul><li>Reference Todo-App implementation using <code>typesafe-actions</code>: <a href="https://codesandbox.io/s/github/piotrwitek/typesafe-actions/tree/master/codesandbox" target="_blank" rel="noopener">Link</a></li><li>Starter to help reproduce bug reports: <a href="https://codesandbox.io/s/github/piotrwitek/typesafe-actions/tree/master/codesandbox" target="_blank" rel="noopener">Link</a></li></ul><hr><h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><!-- START doctoc generated TOC please keep comment here to allow auto update --><!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --><ul><li><a href="#motivation">Motivation</a></li><li><a href="#installation">Installation</a></li><li><a href="#compatibility-notes">Compatibility Notes</a></li><li><a href="#contributing-guide">Contributing Guide</a></li><li><a href="#funding">Funding</a></li><li><a href="#tutorial">Tutorial</a><ul><li><a href="#constants">Constants</a></li><li><a href="#actions">Actions</a><ul><li><a href="#1-basic-actions">1. Basic actions</a></li><li><a href="#2-fsa-compliant-actions">2. FSA compliant actions</a></li><li><a href="#3-custom-actions-non-standard-use-cases">3. Custom actions (non-standard use-cases)</a></li></ul></li><li><a href="#action-helpers">Action Helpers</a><ul><li><a href="#using-action-creators-instances-instead-of-type-constants">Using action-creators instances instead of type-constants</a></li><li><a href="#using-regular-type-constants">Using regular type-constants</a></li></ul></li><li><a href="#reducers">Reducers</a><ul><li><a href="#extending-internal-types-to-enable-type-free-syntax-with-createreducer">Extending internal types to enable type-free syntax with <code>createReducer</code></a></li><li><a href="#using-createreducer-api-with-type-free-syntax">Using createReducer API with type-free syntax</a></li><li><a href="#alternative-usage-with-regular-switch-reducer">Alternative usage with regular switch reducer</a></li></ul></li><li><a href="#async-flows">Async-Flows</a><ul><li><a href="#with-redux-observable-epics">With <code>redux-observable</code> epics</a></li><li><a href="#with-redux-saga-sagas">With <code>redux-saga</code> sagas</a></li></ul></li></ul></li><li><a href="#api-docs">API Docs</a><ul><li><a href="#action-creators-api">Action-Creators API</a><ul><li><a href="#action"><code>action</code></a></li><li><a href="#createaction"><code>createAction</code></a></li><li><a href="#createstandardaction"><code>createStandardAction</code></a></li><li><a href="#createcustomaction"><code>createCustomAction</code></a></li><li><a href="#createasyncaction"><code>createAsyncAction</code></a></li></ul></li><li><a href="#reducer-creators-api">Reducer-Creators API</a><ul><li><a href="#createreducer"><code>createReducer</code></a></li></ul></li><li><a href="#action-helpers-api">Action-Helpers API</a><ul><li><a href="#gettype"><code>getType</code></a></li><li><a href="#isactionof"><code>isActionOf</code></a></li><li><a href="#isoftype"><code>isOfType</code></a></li></ul></li><li><a href="#type-helpers-api">Type-Helpers API</a><ul><li><a href="#actiontype"><code>ActionType</code></a></li><li><a href="#statetype"><code>StateType</code></a></li></ul></li></ul></li><li><a href="#migration-guides">Migration Guides</a><ul><li><a href="#v3xx-to-v4xx"><code>v3.x.x</code> to <code>v4.x.x</code></a></li><li><a href="#v2xx-to-v3xx"><code>v2.x.x</code> to <code>v3.x.x</code></a></li><li><a href="#v1xx-to-v2xx"><code>v1.x.x</code> to <code>v2.x.x</code></a></li><li><a href="#migrating-from-redux-actions-to-typesafe-actions">Migrating from <code>redux-actions</code> to <code>typesafe-actions</code></a></li></ul></li><li><a href="#recipes">Recipes</a><ul><li><a href="#restrict-meta-type-in-action-creator">Restrict Meta type in <code>action</code> creator</a></li></ul></li><li><a href="#compare-to-others">Compare to others</a><ul><li><a href="#redux-actions"><code>redux-actions</code></a></li></ul></li><li><a href="#mit-license">MIT License</a></li></ul><!-- END doctoc generated TOC please keep comment here to allow auto update --><hr><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>当时我准备把Redux和Typescript进行结合开发，我尝试使用<a href="https://redux-actions.js.org/" target="_blank" rel="noopener">redux-actions</a> 来减少需要维护的代码和 <strong>action-creators</strong> 模板。不幸的是，由于错误的类型以及不完整的类型接口布遍了代码，所以结果并不理想<a href="#redux-actions">(点击这里查看对照)</a>  </p><p>现存的解决方案不是太冗余就是使用 class 来解决(可读性差，而且需要new关键字😱)</p><p><strong>所以我创建了<code>typesafe-actions</code> 来解决上述的痛点</strong></p><p>核心设计方案是设计一个使用TypeScript中<strong>type-inference</strong>💪力量的API来举起“可维护的负担”的类型注释。另外，我希望使他“看起来或者感觉起来”都尽可能的接近我们所习惯的JavaScript❤️,所以我不想写太多多余的注解来给代码带来过多的噪点。</p><p><a href="#table-of-contents">⇧ back to top</a></p><hr><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">// NPM<br>npm install typesafe-actions<br><br>// YARN<br>yarn add typesafe-actions<br></code></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><hr><h2 id="兼容性注意"><a href="#兼容性注意" class="headerlink" title="兼容性注意"></a>兼容性注意</h2><p><strong>TypeScript support</strong></p><ul><li><a href="mailto:`typesafe-actions@1.X.X" target="_blank" rel="noopener">`typesafe-actions@1.X.X</a>` - minimal TS v2.7</li><li><a href="mailto:`typesafe-actions@2.X.X" target="_blank" rel="noopener">`typesafe-actions@2.X.X</a>` - minimal TS v2.9</li><li><a href="mailto:`typesafe-actions@3.X.X" target="_blank" rel="noopener">`typesafe-actions@3.X.X</a>` - minimal TS v3.2</li><li><a href="mailto:`typesafe-actions@4.X.X" target="_blank" rel="noopener">`typesafe-actions@4.X.X</a>` - minimal TS v3.2</li></ul><p><strong>浏览器支持情况</strong></p><p>兼容所有主流浏览器。</p><p>旧的浏览器的支持情况：IE &lt;= 11 ，某些手机浏览器你需要提供下列的扩展库</p><ul><li><a href="https://developer.mozilla.org/pl/docs/Web/JavaScript/Referencje/Obiekty/Object/assign#Polyfill" target="_blank" rel="noopener">Object.assign</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" target="_blank" rel="noopener">Array.prototype.includes</a></li></ul><p><strong>Recommended polyfill for IE</strong></p><p>To provide the best compatibility please include a popular polyfill package in your application, such as <code>core-js</code> or <code>react-app-polyfill</code> for <code>create-react-app</code>.<br>Please check the <code>React</code> guidelines to learn how to do that: <a href="https://reactjs.org/docs/javascript-environment-requirements.html" target="_blank" rel="noopener">LINK</a><br>A polyfill fo IE11 is included in our <code>/codesandbox</code> application.</p><p><a href="#table-of-contents">⇧ back to top</a></p><hr><h2 id="Contributing-Guide"><a href="#Contributing-Guide" class="headerlink" title="Contributing Guide"></a>Contributing Guide</h2><p>We are open for contributions. If you’re planning to contribute please make sure to read the contributing guide: <a href="/CONTRIBUTING.md">CONTRIBUTING.md</a></p><p><a href="#table-of-contents">⇧ back to top</a></p><hr><h2 id="Funding"><a href="#Funding" class="headerlink" title="Funding"></a>Funding</h2><p><strong>Typesafe-Actions</strong> is an independent open-source project created by people investing their free time for the benefit of our community.</p><p>If you are using <strong>Typesafe-Actions</strong> please consider donating as this will guarantee the project will be updated and maintained in the long run.</p><p>Issues can be funded by anyone interested in them being resolved. Reward will be transparently distributed to the contributor handling the task through the IssueHunt platform.</p><p><a href="https://issuehunt.io/repos/110746954" target="_blank" rel="noopener"><img src="https://issuehunt.io/static/embed/issuehunt-button-v1.svg" alt="Let&#39;s fund issues in this repository"></a></p><p><a href="#table-of-contents">⇧ back to top</a></p><hr><h2 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h2><p>为了展示使用了这个库<strong>type-safety</strong>后的灵活性和强大，让我们使用Redux结构来构建一个最常见的应用——经典的 todo-app 应用</p><blockquote><p><strong>注意</strong><br>请确保你以具备以下的知识点以便能顺利的完成教程: <a href="https://www.typescriptlang.org/docs/handbook/type-inference.html" target="_blank" rel="noopener">Type Inference</a>, <a href="https://github.com/Microsoft/TypeScript/wiki/What%27s-new-in-TypeScript#control-flow-based-type-analysis" target="_blank" rel="noopener">Control flow analysis</a>, <a href="https://github.com/Microsoft/TypeScript/wiki/What%27s-new-in-TypeScript#tagged-union-types" target="_blank" rel="noopener">Tagged union types</a>, <a href="https://www.typescriptlang.org/docs/handbook/generics.html" target="_blank" rel="noopener">Generics</a> and <a href="https://www.typescriptlang.org/docs/handbook/advanced-types.html" target="_blank" rel="noopener">Advanced Types</a>.</p></blockquote><p><a href="#table-of-contents">⇧ back to top</a></p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><blockquote><p><strong>RECOMMENDATION:</strong><br>When using <code>typesafe-actions</code> in your project you won’t need to export and reuse <strong>string constants</strong>. It’s because <strong>action-creators</strong> created by this library have static property with <strong>action type</strong> that you can easily access using <strong>actions-helpers</strong> and then use it in reducers, epics, sagas, and basically any other place. This will simplify your codebase and remove some boilerplate code associated with the usage of <strong>string constants</strong>. Check our <code>/codesandbox</code> application to learn some best-practices to create such codebase.</p></blockquote><p><strong>使用字符串常量时的Typescript局限</strong> - 当使用字符创常量作为<code>action</code>的type时, 请确保使用<strong>简单易懂的字符串常量</strong>. 限制来自原 type-system, 因为所有的动态字符创操作（比如：字符串连接，字符串模板以及作为映射的对象）会扩大这个类型成为着急类，<code>String</code>。结果就是破坏了action的上下文意思。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// Example file: './constants.ts'</span><br><br><span class="hljs-comment">// WARNING: 错误的使用方法</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> ADD = prefix + <span class="hljs-string">'ADD'</span>; <span class="hljs-comment">// =&gt; string</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> ADD = <span class="hljs-string">`<span class="hljs-subst">$&#123;prefix&#125;</span>/ADD`</span>; <span class="hljs-comment">// =&gt; string</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>   ADD: <span class="hljs-string">'@prefix/ADD'</span>, <span class="hljs-comment">// =&gt; string</span><br>&#125;<br><br><span class="hljs-comment">// 正确的使用方法</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> ADD = <span class="hljs-string">'@prefix/ADD'</span>; <span class="hljs-comment">// =&gt; '@prefix/ADD'</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> TOGGLE = <span class="hljs-string">'@prefix/TOGGLE'</span>; <span class="hljs-comment">// =&gt; '@prefix/TOGGLE'</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (&#123;<br>  ADD: <span class="hljs-string">'@prefix/ADD'</span>, <span class="hljs-comment">// =&gt; '@prefix/ADD'</span><br>&#125; <span class="hljs-keyword">as</span> <span class="hljs-keyword">const</span>) <span class="hljs-comment">// working in TS v3.4 and above =&gt; https://github.com/Microsoft/TypeScript/pull/29510</span><br></code></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><h3 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h3><p>不同的项目有不同的需求，不同的团队有不同的约定，这就是为什么我认为<code>typesafe-actions</code>设计的为什么需要设计的灵活。这里提供三种常用的不同方式让你选择，所以你可以选择最适合你团队的。</p><h4 id="1-Basic-actions"><a href="#1-Basic-actions" class="headerlink" title="1. Basic actions"></a>1. Basic actions</h4><p><code>action</code> 和 <code>createAction</code> 是两个使用预设好的属性 ({ type, payload, meta })来创建 <strong>actions</strong>的创建者. 这使他们简洁而又自以为是。</p><p>重要的属性是生成的<strong>action-creator</strong>将具有可变数量的参数并保留其语义名称（id，title，amount等）。</p><p>这两个创建者是非常像的，唯一不同的是 <code>action</code> 不能和 <code>action-helpers</code>一起使用。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; action, createAction &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'typesafe-actions'</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> add = <span class="hljs-function">(<span class="hljs-params">title: <span class="hljs-built_in">string</span></span>) =&gt;</span> action(<span class="hljs-string">'todos/ADD'</span>, &#123; id: cuid(), title, completed: <span class="hljs-literal">false</span> &#125;);<br><span class="hljs-comment">// add: (title: string) =&gt; &#123; type: "todos/ADD"; payload: &#123; id: string, title: string, completed: boolean; &#125;; &#125;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> add = createAction(<span class="hljs-string">'todos/ADD'</span>, <span class="hljs-function"><span class="hljs-params">action</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// Note: "action" callback does not need "type" parameter</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">title: <span class="hljs-built_in">string</span></span>) =&gt;</span> action(&#123; id: cuid(), title, completed: <span class="hljs-literal">false</span> &#125;);<br>&#125;);<br><span class="hljs-comment">// add: (title: string) =&gt; &#123; type: "todos/ADD"; payload: &#123; id: string, title: string, completed: boolean; &#125;; &#125;</span><br></code></pre></td></tr></table></figure><h4 id="2-FSA-compliant-actions"><a href="#2-FSA-compliant-actions" class="headerlink" title="2. FSA compliant actions"></a>2. FSA compliant actions</h4><p>This style is aligned with <a href="https://github.com/redux-utilities/flux-standard-action" target="_blank" rel="noopener">Flux Standard Action</a>, so your <strong>action</strong> object shape is constrained to <code>({ type, payload, meta, error })</code>. It is using <strong>generic type arguments</strong> for <code>meta</code> and <code>payload</code> to simplify creation of type-safe action-creators.</p><p>It is important to notice that in the resulting <strong>action-creator</strong> arguments are also constrained to the predefined: <code>(payload, meta)</code>, making it the most opinionated creator.</p><blockquote><p><strong>TIP</strong>: This creator is the most compatible with <code>redux-actions</code> in case you are migrating.</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; createStandardAction &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'typesafe-actions'</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> toggle = createStandardAction(<span class="hljs-string">'todos/TOGGLE'</span>)&lt;<span class="hljs-built_in">string</span>&gt;();<br><span class="hljs-comment">// toggle: (payload: string) =&gt; &#123; type: "todos/TOGGLE"; payload: string; &#125;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> add = createStandardAction(<span class="hljs-string">'todos/ADD'</span>).map(<br>  <span class="hljs-function">(<span class="hljs-params">title: <span class="hljs-built_in">string</span></span>) =&gt;</span> (&#123;<br>    payload: &#123; id: cuid(), title, completed: <span class="hljs-literal">false</span> &#125;,<br>  &#125;)<br>);<br><span class="hljs-comment">// add: (payload: string) =&gt; &#123; type: "todos/ADD"; payload: &#123; id: string, title: string, completed: boolean; &#125;; &#125;</span><br></code></pre></td></tr></table></figure><h4 id="3-Custom-actions-non-standard-use-cases"><a href="#3-Custom-actions-non-standard-use-cases" class="headerlink" title="3. Custom actions (non-standard use-cases)"></a>3. Custom actions (non-standard use-cases)</h4><p>This approach will give us the most flexibility of all creators, providing a variadic number of named parameters and custom properties on <strong>action</strong> object to fit all the custom use-cases.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; createCustomAction &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'typesafe-actions'</span>;<br><br><span class="hljs-keyword">const</span> add = createCustomAction(<span class="hljs-string">'todos/ADD'</span>, <span class="hljs-function"><span class="hljs-params">type</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">title: <span class="hljs-built_in">string</span></span>) =&gt;</span> (&#123; <span class="hljs-keyword">type</span>, id: cuid(), title, completed: <span class="hljs-literal">false</span> &#125;);<br>&#125;);<br><span class="hljs-comment">// add: (title: string) =&gt; &#123; type: "todos/ADD"; id: string; title: string; completed: boolean; &#125;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>TIP</strong>: For more examples please check the <a href="#table-of-contents">API Docs</a>.</p></blockquote><blockquote><p><strong>RECOMMENDATION</strong><br>Common approach is to create a <code>RootAction</code> in the central point of your redux store - it will represent all possible action types in your application. You can even merge it with third-party action types as shown below to make your model complete.</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// types.d.ts</span><br><span class="hljs-comment">// example of including `react-router` actions in `RootAction`</span><br><span class="hljs-keyword">import</span> &#123; RouterAction, LocationChangeAction &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react-router-redux'</span>;<br><span class="hljs-keyword">import</span> &#123; TodosAction &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'../features/todos'</span>;<br><br><span class="hljs-keyword">type</span> ReactRouterAction = RouterAction | LocationChangeAction;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> RootAction =<br>  | ReactRouterAction<br>  | TodosAction;<br></code></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><h3 id="Action-Helpers"><a href="#Action-Helpers" class="headerlink" title="Action Helpers"></a>Action Helpers</h3><p>现在我想展时以下<strong>action-helpers</strong>以及解释一下他的用例。我们将要实现一个没有副作用的当用户成功添加新数据时展现成功的提示。</p><p>主要注意以下，所有的这些helpers都是扮演者类型守护者，所以他们全部都是小标签组成的唯一Type(<code>RootAction</code>)来指定我们想要的action类型</p><p><strong>使用<code>action-creators</code>来替代类型常量</strong></p><p>我们可以用<strong>action-creators</strong>来替代类型常量来匹配reduces里指定的action以及epics用例。通过为包含类型字符的<strong>action-creator</strong>实例添加静态属性来使用</p><p>最常用的命令就是<code>getType</code>，他常用于常规的reducer中的switch cases:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">switch</span> (action.type) &#123;<br>  <span class="hljs-keyword">case</span> getType(todos.add):<br>    <span class="hljs-comment">// below action type is narrowed to: &#123; type: "todos/ADD"; payload: Todo; &#125;</span><br>    <span class="hljs-keyword">return</span> [...state, action.payload];<br>  ...<br></code></pre></td></tr></table></figure><p>Then we have the <code>isActionOf</code> helper which accept <strong>action-creator</strong> as first parameter matching actions with corresponding type passed as second parameter (it’s a curried function).</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// epics.ts</span><br><span class="hljs-keyword">import</span> &#123; isActionOf &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'typesafe-actions'</span>;<br><br><span class="hljs-keyword">import</span> &#123; add &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'./actions'</span>;<br><br><span class="hljs-keyword">const</span> addTodoToast: Epic&lt;RootAction, RootAction, RootState, Services&gt; = <span class="hljs-function">(<span class="hljs-params">action$, store, &#123; toastService &#125;</span>) =&gt;</span><br>  action$.pipe(<br>    filter(isActionOf(add)),<br>    tap(<span class="hljs-function"><span class="hljs-params">action</span> =&gt;</span> &#123; <span class="hljs-comment">// here action type is narrowed to: &#123; type: "todos/ADD"; payload: Todo; &#125;</span><br>      toastService.success(...);<br>    &#125;)<br>    ...<br>    <br>  <span class="hljs-comment">// Works with multiple actions! (with type-safety up to 5)</span><br>  action$.pipe(<br>    filter(isActionOf([add, toggle])) <span class="hljs-comment">// here action type is narrowed to a smaller union:</span><br>    <span class="hljs-comment">// &#123; type: "todos/ADD"; payload: Todo; &#125; | &#123; type: "todos/TOGGLE"; payload: string; &#125;</span><br></code></pre></td></tr></table></figure><h4 id="Using-regular-type-constants"><a href="#Using-regular-type-constants" class="headerlink" title="Using regular type-constants"></a>Using regular type-constants</h4><p>Alternatively if your team prefers to use regular <strong>type-constants</strong> you can still do that.</p><p>We have an equivalent helper (<code>isOfType</code>) which accept <strong>type-constants</strong> as parameter providing the same functionality.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// epics.ts</span><br><span class="hljs-keyword">import</span> &#123; isOfType &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'typesafe-actions'</span>;<br><br><span class="hljs-keyword">import</span> &#123; ADD &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'./constants'</span>;<br><br><span class="hljs-keyword">const</span> addTodoToast: Epic&lt;RootAction, RootAction, RootState, Services&gt; = <span class="hljs-function">(<span class="hljs-params">action$, store, &#123; toastService &#125;</span>) =&gt;</span><br>  action$.pipe(<br>    filter(isOfType(ADD)),<br>    tap(<span class="hljs-function"><span class="hljs-params">action</span> =&gt;</span> &#123; <span class="hljs-comment">// here action type is narrowed to: &#123; type: "todos/ADD"; payload: Todo; &#125;</span><br>    ...<br>    <br>  <span class="hljs-comment">// Works with multiple actions! (with type-safety up to 5)</span><br>  action$.pipe(<br>    filter(isOfType([ADD, TOGGLE])) <span class="hljs-comment">// here action type is narrowed to a smaller union:</span><br>    <span class="hljs-comment">// &#123; type: "todos/ADD"; payload: Todo; &#125; | &#123; type: "todos/TOGGLE"; payload: string; &#125;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>TIP:</strong> you can use action-helpers with other types of conditional statements.</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; isActionOf, isOfType &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'typesafe-actions'</span>;<br><br><span class="hljs-keyword">if</span> (isActionOf(actions.add, action)) &#123;<br>  <span class="hljs-comment">// here action is narrowed to: &#123; type: "todos/ADD"; payload: Todo; &#125;</span><br>&#125;<br><span class="hljs-comment">// or with type constants</span><br><span class="hljs-keyword">if</span> (isOfType(types.ADD, action)) &#123;<br>  <span class="hljs-comment">// here action is narrowed to: &#123; type: "todos/ADD"; payload: Todo; &#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><h3 id="Reducers"><a href="#Reducers" class="headerlink" title="Reducers"></a>Reducers</h3><h4 id="Extending-internal-types-to-enable-type-free-syntax-with-createReducer"><a href="#Extending-internal-types-to-enable-type-free-syntax-with-createReducer" class="headerlink" title="Extending internal types to enable type-free syntax with createReducer"></a>Extending internal types to enable type-free syntax with <code>createReducer</code></h4><p>We can extend internal types of <code>typesafe-actions</code> module with <code>RootAction</code> definition of our application so that you don’t need to pass generic type arguments with <code>createReducer</code> API:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// types.d.ts</span><br><span class="hljs-keyword">import</span> &#123; StateType, ActionType &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'typesafe-actions'</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> RootAction = ActionType&lt;<span class="hljs-keyword">typeof</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">'./actions'</span>).default&gt;;<br><br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">module</span> 'typesafe-actions' &#123;<br>  <span class="hljs-keyword">interface</span> Types &#123;<br>    RootAction: RootAction;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// now you can use</span><br>createReducer(...)<br><span class="hljs-comment">// instead of</span><br>createReducer&lt;State, Action&gt;(...)<br></code></pre></td></tr></table></figure><h4 id="Using-createReducer-API-with-type-free-syntax"><a href="#Using-createReducer-API-with-type-free-syntax" class="headerlink" title="Using createReducer API with type-free syntax"></a>Using createReducer API with type-free syntax</h4><p>We can prevent a lot of boilerplate code and type errors using this powerfull and completely typesafe API.</p><p>Using handleAction chain API:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// using action-creators</span><br><span class="hljs-keyword">const</span> counterReducer = createReducer(<span class="hljs-number">0</span>)<br>  <span class="hljs-comment">// state and action type is automatically inferred and return type is validated to be exact type</span><br>  .handleAction(add, <span class="hljs-function">(<span class="hljs-params">state, action</span>) =&gt;</span> state + action.payload)<br>  .handleAction(add, ... <span class="hljs-comment">// &lt;= error is shown on duplicated or invalid actions</span><br>  .handleAction(increment, <span class="hljs-function">(<span class="hljs-params">state, _</span>) =&gt;</span> state + <span class="hljs-number">1</span>)<br>  .handleAction(... <span class="hljs-comment">// &lt;= error is shown when all actions are handled</span><br>  <br>  <span class="hljs-comment">// or handle multiple actions using array</span><br>  .handleAction([add, increment], <span class="hljs-function">(<span class="hljs-params">state, action</span>) =&gt;</span><br>    state + (action.type === <span class="hljs-string">'ADD'</span> ? action.payload : <span class="hljs-number">1</span>)<br>  );<br><br><span class="hljs-comment">// all the same scenarios are working when using type-constants</span><br><span class="hljs-keyword">const</span> counterReducer = createReducer(<span class="hljs-number">0</span>)<br>  .handleAction(<span class="hljs-string">'ADD'</span>, <span class="hljs-function">(<span class="hljs-params">state, action</span>) =&gt;</span> state + action.payload)<br>  .handleAction(<span class="hljs-string">'INCREMENT'</span>, <span class="hljs-function">(<span class="hljs-params">state, _</span>) =&gt;</span> state + <span class="hljs-number">1</span>);<br>  <br>counterReducer(<span class="hljs-number">0</span>, add(<span class="hljs-number">4</span>)); <span class="hljs-comment">// =&gt; 4</span><br>counterReducer(<span class="hljs-number">0</span>, increment()); <span class="hljs-comment">// =&gt; 1</span><br></code></pre></td></tr></table></figure></p><h4 id="Alternative-usage-with-regular-switch-reducer"><a href="#Alternative-usage-with-regular-switch-reducer" class="headerlink" title="Alternative usage with regular switch reducer"></a>Alternative usage with regular switch reducer</h4><p>First we need to start by generating a <strong>tagged union type</strong> of actions (<code>TodosAction</code>). It’s very easy to do by using <code>ActionType</code> <strong>type-helper</strong>.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; ActionType &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'typesafe-actions'</span>;<br><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> todos <span class="hljs-keyword">from</span> <span class="hljs-string">'./actions'</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> TodosAction = ActionType&lt;<span class="hljs-keyword">typeof</span> todos&gt;;<br></code></pre></td></tr></table></figure><p>Now we define a regular reducer function by annotating <code>state</code> and <code>action</code> arguments with their respective types (<code>TodosAction</code> for action type).</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (state: Todo[] = [], action: TodosAction) =&gt; &#123;<br></code></pre></td></tr></table></figure><p>Now in the switch cases we can use the <code>type</code> property of action to narrowing the union type of <code>TodosAction</code> to an action that is corresponding to that type.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">switch</span> (action.type) &#123;<br>  <span class="hljs-keyword">case</span> getType(add):<br>    <span class="hljs-comment">// below action type is narrowed to: &#123; type: "todos/ADD"; payload: Todo; &#125;</span><br>    <span class="hljs-keyword">return</span> [...state, action.payload];<br>  ...<br></code></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><h3 id="Async-Flows"><a href="#Async-Flows" class="headerlink" title="Async-Flows"></a>Async-Flows</h3><h4 id="With-redux-observable-epics"><a href="#With-redux-observable-epics" class="headerlink" title="With redux-observable epics"></a>With <code>redux-observable</code> epics</h4><p>To handle an async-flow of http request lets implement an <code>epic</code>. The <code>epic</code> will call a remote API using an injected <code>todosApi</code> client, which will return a Promise that we’ll need to handle by using three different actions that correspond to triggering, success and failure.</p><p>To help us simplify the creation process of necessary action-creators, we’ll use <code>createAsyncAction</code> function providing us with a nice common interface object <code>{ request: ... , success: ... , failure: ... }</code> that will nicely fit with the functional API of <code>RxJS</code>.<br>This will mitigate <strong>redux verbosity</strong> and greatly reduce the maintenance cost of type annotations for <strong>actions</strong> and <strong>action-creators</strong> that would otherwise be written explicitly.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// actions.ts</span><br><span class="hljs-keyword">import</span> &#123; createAsyncAction &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'typesafe-actions'</span>;<br><br><span class="hljs-keyword">const</span> fetchTodosAsync = createAsyncAction(<br>  <span class="hljs-string">'FETCH_TODOS_REQUEST'</span>,<br>  <span class="hljs-string">'FETCH_TODOS_SUCCESS'</span>,<br>  <span class="hljs-string">'FETCH_TODOS_FAILURE'</span>,<br>  <span class="hljs-string">'FETCH_TODOS_CANCEL'</span><br>)&lt;<span class="hljs-built_in">string</span>, Todo[], <span class="hljs-built_in">Error</span>, <span class="hljs-built_in">string</span>&gt;();<br><br><span class="hljs-comment">// epics.ts</span><br><span class="hljs-keyword">import</span> &#123; fetchTodosAsync &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'./actions'</span>;<br><br><span class="hljs-keyword">const</span> fetchTodosFlow: Epic&lt;RootAction, RootAction, RootState, Services&gt; = <span class="hljs-function">(<span class="hljs-params">action$, store, &#123; todosApi &#125;</span>) =&gt;</span><br>  action$.pipe(<br>    filter(isActionOf(fetchTodosAsync.request)),<br>    switchMap(<span class="hljs-function"><span class="hljs-params">action</span> =&gt;</span><br>      <span class="hljs-keyword">from</span>(todosApi.getAll(action.payload)).pipe(<br>        map(fetchTodosAsync.success),<br>        catchError(pipe(fetchTodosAsync.failure, of)),<br>        takeUntil(action$.pipe(filter(isActionOf(fetchTodosAsync.cancel)))),<br>      )<br>    );<br></code></pre></td></tr></table></figure><h4 id="With-redux-saga-sagas"><a href="#With-redux-saga-sagas" class="headerlink" title="With redux-saga sagas"></a>With <code>redux-saga</code> sagas</h4><p>With sagas it’s not possible to achieve the same degree of type-safety as with epics because of limitations coming from <code>redux-saga</code> API design.</p><p>Typescript issues:</p><ul><li><a href="https://github.com/Microsoft/TypeScript/issues/2983" target="_blank" rel="noopener">Typescript does not currently infer types resulting from a <code>yield</code> statement</a> so you have to manually assert the type  e.g. <code>const response: Todo[] = yield call(...</code></li></ul><p><em>Here is the latest recommendation although it’s not fully optimal. If you managed to cook something better, please open an issue to share your finding with us.</em></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; createAsyncAction &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'typesafe-actions'</span>;<br><br><span class="hljs-keyword">const</span> fetchTodosAsync = createAsyncAction(<br>  <span class="hljs-string">'FETCH_TODOS_REQUEST'</span>,<br>  <span class="hljs-string">'FETCH_TODOS_SUCCESS'</span>,<br>  <span class="hljs-string">'FETCH_TODOS_FAILURE'</span><br>)&lt;<span class="hljs-built_in">string</span>, Todo[], <span class="hljs-built_in">Error</span>&gt;();<br><br><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">addTodoSaga</span>(<span class="hljs-params">action: ReturnType&lt;<span class="hljs-keyword">typeof</span> fetchTodosAsync.request&gt;</span>): <span class="hljs-title">Generator</span> </span>&#123;<br>    <span class="hljs-keyword">const</span> response: Todo[] = <span class="hljs-keyword">yield</span> call(todosApi.getAll, action.payload);<br><br>    <span class="hljs-keyword">yield</span> put(fetchTodosAsync.success(response));<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    <span class="hljs-keyword">yield</span> put(fetchTodosAsync.failure(err));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><hr><h2 id="API-Docs"><a href="#API-Docs" class="headerlink" title="API Docs"></a>API Docs</h2><h3 id="Action-Creators-API"><a href="#Action-Creators-API" class="headerlink" title="Action-Creators API"></a>Action-Creators API</h3><h4 id="action"><a href="#action" class="headerlink" title="action"></a><code>action</code></h4><p><em>Simple <strong>action factory function</strong> to simplify creation of type-safe actions.</em></p><blockquote><p><strong>WARNING</strong>:<br>This approach will <strong>NOT WORK</strong> with <strong>action-helpers</strong> (such as <code>getType</code> and <code>isActionOf</code>) because it is creating <strong>action objects</strong> while all the other creator functions are returning <strong>enhanced action-creators</strong>.</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts">action(<span class="hljs-keyword">type</span>, payload?, meta?, error?)<br></code></pre></td></tr></table></figure><p>Examples:<br><a href="src/action.spec.ts">&gt; Advanced Usage Examples</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> increment = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> action(<span class="hljs-string">'INCREMENT'</span>);<br><span class="hljs-comment">// &#123; type: 'INCREMENT'; &#125;</span><br><br><span class="hljs-keyword">const</span> createUser = <span class="hljs-function">(<span class="hljs-params">id: <span class="hljs-built_in">number</span>, name: <span class="hljs-built_in">string</span></span>) =&gt;</span><br>  action(<span class="hljs-string">'CREATE_USER'</span>, &#123; id, name &#125;);<br><span class="hljs-comment">// &#123; type: 'CREATE_USER'; payload: &#123; id: number; name: string &#125;; &#125;</span><br><br><span class="hljs-keyword">const</span> getUsers = <span class="hljs-function">(<span class="hljs-params">params?: <span class="hljs-built_in">string</span></span>) =&gt;</span><br>  action(<span class="hljs-string">'GET_USERS'</span>, <span class="hljs-literal">undefined</span>, params);<br><span class="hljs-comment">// &#123; type: 'GET_USERS'; meta: string | undefined; &#125;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>TIP</strong>: Starting from TypeScript v3.4 you can achieve similar results using new <code>as const</code> operator.</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> increment = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> (&#123; <span class="hljs-keyword">type</span>: <span class="hljs-string">'INCREMENT'</span> &#125; <span class="hljs-keyword">as</span> <span class="hljs-keyword">const</span>);<br></code></pre></td></tr></table></figure><h4 id="createAction"><a href="#createAction" class="headerlink" title="createAction"></a><code>createAction</code></h4><p><em>Create an enhanced action-creator with unlimited number of arguments.</em></p><ul><li>Resulting action-creator will preserve semantic names of their arguments  <code>(id, title, amount, etc...)</code>.</li><li>Returned action object have predefined properties <code>({ type, payload, meta })</code></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts">createAction(<span class="hljs-keyword">type</span>)<br>createAction(<span class="hljs-keyword">type</span>, <span class="hljs-function"><span class="hljs-params">actionCallback</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">namedArg1, namedArg2, ...namedArgN</span>) =&gt;</span> actionCallback(payload?, meta?)<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p><strong>TIP</strong>: Injected <code>actionCallback</code> argument is similar to <code>action</code> API but doesn’t need the “type” parameter</p></blockquote><p>Examples:<br><a href="src/create-action.spec.ts">&gt; Advanced Usage Examples</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; createAction &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'typesafe-actions'</span>;<br><br><span class="hljs-comment">// - with type only</span><br><span class="hljs-keyword">const</span> increment = createAction(<span class="hljs-string">'INCREMENT'</span>);<br>dispatch(increment());<br><span class="hljs-comment">// &#123; type: 'INCREMENT' &#125;;</span><br><br><span class="hljs-comment">// - with type and payload</span><br><span class="hljs-keyword">const</span> add = createAction(<span class="hljs-string">'ADD'</span>, <span class="hljs-function"><span class="hljs-params">action</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">amount: <span class="hljs-built_in">number</span></span>) =&gt;</span> action(amount);<br>&#125;);<br>dispatch(add(<span class="hljs-number">10</span>));<br><span class="hljs-comment">// &#123; type: 'ADD', payload: number &#125;</span><br><br><span class="hljs-comment">// - with type and meta</span><br><span class="hljs-keyword">const</span> getTodos = createAction(<span class="hljs-string">'GET_TODOS'</span>, <span class="hljs-function"><span class="hljs-params">action</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">params: Params</span>) =&gt;</span> action(<span class="hljs-literal">undefined</span>, params);<br>&#125;);<br>dispatch(getTodos(<span class="hljs-string">'some_meta'</span>));<br><span class="hljs-comment">// &#123; type: 'GET_TODOS', meta: Params &#125;</span><br><br><span class="hljs-comment">// - and finally with type, payload and meta</span><br><span class="hljs-keyword">const</span> getTodo = createAction(<span class="hljs-string">'GET_TODO'</span>, <span class="hljs-function"><span class="hljs-params">action</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">id: <span class="hljs-built_in">string</span>, meta: <span class="hljs-built_in">string</span></span>) =&gt;</span> action(id, meta);<br>&#125;);<br>dispatch(getTodo(<span class="hljs-string">'some_id'</span>, <span class="hljs-string">'some_meta'</span>));<br><span class="hljs-comment">// &#123; type: 'GET_TODO', payload: string, meta: string &#125;</span><br></code></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><h4 id="createStandardAction"><a href="#createStandardAction" class="headerlink" title="createStandardAction"></a><code>createStandardAction</code></h4><p><em>Create an enhanced action-creator compatible with <a href="https://github.com/redux-utilities/flux-standard-action" target="_blank" rel="noopener">Flux Standard Action</a> to reduce boilerplate and enforce convention.</em></p><ul><li>Resulting action-creator have predefined arguments <code>(payload, meta)</code></li><li>Returned action object have predefined properties <code>({ type, payload, meta, error })</code></li><li>But it also contains a <code>.map()</code> method that allow to map <code>(payload, meta)</code> arguments to a custom action object <code>({ customProp1, customProp2, ...customPropN })</code></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts">createStandardAction(<span class="hljs-keyword">type</span>)()<br>createStandardAction(<span class="hljs-keyword">type</span>)&lt;TPayload, TMeta?&gt;()<br>createStandardAction(<span class="hljs-keyword">type</span>).map(<span class="hljs-function">(<span class="hljs-params">payload, meta</span>) =&gt;</span> (&#123; customProp1, customProp2, ...customPropN &#125;))<br></code></pre></td></tr></table></figure><blockquote><p><strong>TIP</strong>: Using <code>undefined</code> as generic type parameter you can make the action-creator function require NO parameters.</p></blockquote><p>Examples:<br><a href="src/create-standard-action.spec.ts">&gt; Advanced Usage Examples</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; createStandardAction &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'typesafe-actions'</span>;<br><br><span class="hljs-comment">// Very concise with use of generic type arguments</span><br><span class="hljs-comment">// - with type only</span><br><span class="hljs-keyword">const</span> increment = createStandardAction(<span class="hljs-string">'INCREMENT'</span>)();<br><span class="hljs-keyword">const</span> increment = createStandardAction(<span class="hljs-string">'INCREMENT'</span>)&lt;<span class="hljs-literal">undefined</span>&gt;();<br>increment(); <span class="hljs-comment">// &#123; type: 'INCREMENT' &#125; (no parameters are required)</span><br><br><br><span class="hljs-comment">// - with type and payload</span><br><span class="hljs-keyword">const</span> add = createStandardAction(<span class="hljs-string">'ADD'</span>)&lt;<span class="hljs-built_in">number</span>&gt;();<br>add(<span class="hljs-number">10</span>); <span class="hljs-comment">// &#123; type: 'ADD', payload: number &#125;</span><br><br><span class="hljs-comment">// - with type and meta</span><br><span class="hljs-keyword">const</span> getData = createStandardAction(<span class="hljs-string">'GET_DATA'</span>)&lt;<span class="hljs-literal">undefined</span>, <span class="hljs-built_in">string</span>&gt;();<br>getData(<span class="hljs-literal">undefined</span>, <span class="hljs-string">'meta'</span>); <span class="hljs-comment">// &#123; type: 'GET_DATA', meta: string &#125;</span><br><br><span class="hljs-comment">// - and finally with type, payload and meta</span><br><span class="hljs-keyword">const</span> getData = createStandardAction(<span class="hljs-string">'GET_DATA'</span>)&lt;<span class="hljs-built_in">number</span>, <span class="hljs-built_in">string</span>&gt;();<br>getData(<span class="hljs-number">1</span>, <span class="hljs-string">'meta'</span>); <span class="hljs-comment">// &#123; type: 'GET_DATA', payload: number, meta: string &#125;</span><br><br><span class="hljs-comment">// Can map payload and meta arguments to a custom action object</span><br><span class="hljs-keyword">const</span> notify = createStandardAction(<span class="hljs-string">'NOTIFY'</span>).map(<br>  <span class="hljs-function">(<span class="hljs-params">payload: <span class="hljs-built_in">string</span>, meta: Meta</span>) =&gt;</span> (&#123;<br>    <span class="hljs-keyword">from</span>: meta.username,<br>    message: <span class="hljs-string">`<span class="hljs-subst">$&#123;username&#125;</span>: <span class="hljs-subst">$&#123;payload&#125;</span>`</span>,<br>    messageType: meta.type,<br>    datetime: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(),<br>  &#125;)<br>);<br><br>dispatch(notify(<span class="hljs-string">'Hello!'</span>, &#123; username: <span class="hljs-string">'Piotr'</span>, <span class="hljs-keyword">type</span>: <span class="hljs-string">'announcement'</span> &#125;));<br><span class="hljs-comment">// &#123; type: 'NOTIFY', from: string, message: string, messageType: MessageType, datetime: Date &#125;</span><br></code></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><h4 id="createCustomAction"><a href="#createCustomAction" class="headerlink" title="createCustomAction"></a><code>createCustomAction</code></h4><p><em>Create an enhanced action-creator with unlimited number of arguments and custom properties on action object.</em></p><ul><li>Resulting action-creator will preserve semantic names of their arguments  <code>(id, title, amount, etc...)</code>.</li><li>Returned action object have custom properties <code>({ type, customProp1, customProp2, ...customPropN })</code></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts">createCustomAction(<span class="hljs-keyword">type</span>, <span class="hljs-function"><span class="hljs-params">type</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">namedArg1, namedArg2, ...namedArgN</span>) =&gt;</span> (&#123; <span class="hljs-keyword">type</span>, customProp1, customProp2, ...customPropN &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><p>Examples:<br><a href="src/create-action-with-type.spec.ts">&gt; Advanced Usage Examples</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; createCustomAction &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'typesafe-actions'</span>;<br><br><span class="hljs-keyword">const</span> add = createCustomAction(<span class="hljs-string">'CUSTOM'</span>, <span class="hljs-function"><span class="hljs-params">type</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">first: <span class="hljs-built_in">number</span>, second: <span class="hljs-built_in">number</span></span>) =&gt;</span> (&#123; <span class="hljs-keyword">type</span>, customProp1: first, customProp2: second &#125;);<br>&#125;);<br><br>dispatch(add(<span class="hljs-number">1</span>));<br><span class="hljs-comment">// &#123; type: "CUSTOM"; customProp1: number; customProp2: number; &#125;</span><br></code></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><h4 id="createAsyncAction"><a href="#createAsyncAction" class="headerlink" title="createAsyncAction"></a><code>createAsyncAction</code></h4><p><em>Create an object containing three enhanced action-creators to simplify handling of async flows (e.g. network request - request/success/failure).</em></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts">createAsyncAction(<br>  requestType, successType, failureType, cancelType?<br>)&lt;TRequestPayload, TSuccessPayload, TFailurePayload, TCancelPayload?&gt;()<br></code></pre></td></tr></table></figure><h5 id="AsyncActionCreator"><a href="#AsyncActionCreator" class="headerlink" title="AsyncActionCreator"></a><code>AsyncActionCreator</code></h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> AsyncActionCreator&lt;<br>  [TRequestType, TRequestPayload],<br>  [TSuccessType, TSuccessPayload],<br>  [TFailureType, TFailurePayload],<br>  [TCancelType, TCancelPayload]?<br>&gt; = &#123;<br>  request: StandardActionCreator&lt;TRequestType, TRequestPayload&gt;,<br>  success: StandardActionCreator&lt;TSuccessType, TSuccessPayload&gt;,<br>  failure: StandardActionCreator&lt;TFailureType, TFailurePayload&gt;,<br>  cancel?: StandardActionCreator&lt;TCancelType, TCancelPayload&gt;,<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>TIP</strong>: Using <code>undefined</code> as generic type parameter you can make the action-creator function require NO parameters.</p></blockquote><p>Examples:<br><a href="src/create-async-action.spec.ts">&gt; Advanced Usage Examples</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; createAsyncAction, AsyncActionCreator &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'typesafe-actions'</span>;<br><br><span class="hljs-keyword">const</span> fetchUsersAsync = createAsyncAction(<br>  <span class="hljs-string">'FETCH_USERS_REQUEST'</span>,<br>  <span class="hljs-string">'FETCH_USERS_SUCCESS'</span>,<br>  <span class="hljs-string">'FETCH_USERS_FAILURE'</span><br>)&lt;<span class="hljs-built_in">string</span>, User[], <span class="hljs-built_in">Error</span>&gt;();<br><br>dispatch(fetchUsersAsync.request(params));<br><br>dispatch(fetchUsersAsync.success(response));<br><br>dispatch(fetchUsersAsync.failure(err));<br><br><span class="hljs-keyword">const</span> fn = (<br>  a: AsyncActionCreator&lt;<br>    [<span class="hljs-string">'FETCH_USERS_REQUEST'</span>, <span class="hljs-built_in">string</span>],<br>    [<span class="hljs-string">'FETCH_USERS_SUCCESS'</span>, User[]],<br>    [<span class="hljs-string">'FETCH_USERS_FAILURE'</span>, <span class="hljs-built_in">Error</span>]<br>  &gt;<br>) =&gt; a;<br>fn(fetchUsersAsync);<br><br><span class="hljs-comment">// There is 4th optional argument to declare cancel action</span><br><span class="hljs-keyword">const</span> fetchUsersAsync = createAsyncAction(<br>  <span class="hljs-string">'FETCH_USERS_REQUEST'</span>,<br>  <span class="hljs-string">'FETCH_USERS_SUCCESS'</span>,<br>  <span class="hljs-string">'FETCH_USERS_FAILURE'</span><br>  <span class="hljs-string">'FETCH_USERS_CANCEL'</span><br>)&lt;<span class="hljs-built_in">string</span>, User[], <span class="hljs-built_in">Error</span>, <span class="hljs-built_in">string</span>&gt;();<br><br>dispatch(fetchUsersAsync.cancel(<span class="hljs-string">'reason'</span>));<br><br><span class="hljs-keyword">const</span> fn = (<br>  a: AsyncActionCreator&lt;<br>    [<span class="hljs-string">'FETCH_USERS_REQUEST'</span>, <span class="hljs-built_in">string</span>],<br>    [<span class="hljs-string">'FETCH_USERS_SUCCESS'</span>, User[]],<br>    [<span class="hljs-string">'FETCH_USERS_FAILURE'</span>, <span class="hljs-built_in">Error</span>],<br>    [<span class="hljs-string">'FETCH_USERS_CANCEL'</span>, <span class="hljs-built_in">string</span>]<br>  &gt;<br>) =&gt; a;<br>fn(fetchUsersAsync);<br></code></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><hr><h3 id="Reducer-Creators-API"><a href="#Reducer-Creators-API" class="headerlink" title="Reducer-Creators API"></a>Reducer-Creators API</h3><h4 id="createReducer"><a href="#createReducer" class="headerlink" title="createReducer"></a><code>createReducer</code></h4><p><em>Create a typesafe reducer</em></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts">createReducer&lt;TState, TRootAction&gt;(initialState, handlersMap?)<br>  .handleAction(<span class="hljs-keyword">type</span>, reducer)<br>  .handleAction([type1, type2, ...typeN], reducer)<br>  .handleAction(actionCreator, reducer)<br>  .handleAction([actionCreator1, actionCreator2, ...actionCreatorN], reducer)<br></code></pre></td></tr></table></figure><p>Examples:<br><a href="src/create-reducer.spec.ts">&gt; Advanced Usage Examples</a></p><blockquote><p><strong>TIP:</strong> You can use reducer API with a <strong>type-free</strong> syntax by <a href="#extending-internal-types-to-enable-type-free-syntax-with-createreducer">Extending internal types</a>, otherwise you’ll have to pass generic type arguments like in below examples<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// type-free syntax doesn't require generic type arguments</span><br><span class="hljs-keyword">const</span> counterReducer = createReducer(<span class="hljs-number">0</span>, &#123; <br>  ADD: <span class="hljs-function">(<span class="hljs-params">state, action</span>) =&gt;</span> state + action.payload,<br>  [getType(increment)]: <span class="hljs-function">(<span class="hljs-params">state, _</span>) =&gt;</span> state + <span class="hljs-number">1</span>,<br>&#125;)<br></code></pre></td></tr></table></figure></p></blockquote><p>Using type-constants as keys in the object map:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; createReducer, getType &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'typesafe-actions'</span><br><br><span class="hljs-keyword">type</span> State = <span class="hljs-built_in">number</span>;<br><span class="hljs-keyword">type</span> Action = &#123; <span class="hljs-keyword">type</span>: <span class="hljs-string">'ADD'</span>, payload: <span class="hljs-built_in">number</span> &#125; | &#123; <span class="hljs-keyword">type</span>: <span class="hljs-string">'INCREMENT'</span> &#125;;<br><br><span class="hljs-keyword">const</span> counterReducer = createReducer&lt;State, Action&gt;(<span class="hljs-number">0</span>, &#123; <br>  ADD: <span class="hljs-function">(<span class="hljs-params">state, action</span>) =&gt;</span> state + action.payload,<br>  [getType(increment)]: <span class="hljs-function">(<span class="hljs-params">state, _</span>) =&gt;</span> state + <span class="hljs-number">1</span>,<br>&#125;)<br><br>counterReducer(<span class="hljs-number">0</span>, add(<span class="hljs-number">4</span>)); <span class="hljs-comment">// =&gt; 4</span><br>counterReducer(<span class="hljs-number">0</span>, increment()); <span class="hljs-comment">// =&gt; 1</span><br></code></pre></td></tr></table></figure></p><p>Using handleAction chain API:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// using action-creators</span><br><span class="hljs-keyword">const</span> counterReducer = createReducer&lt;State, Action&gt;(<span class="hljs-number">0</span>)<br>  .handleAction(add, <span class="hljs-function">(<span class="hljs-params">state, action</span>) =&gt;</span> state + action.payload)<br>  .handleAction(increment, <span class="hljs-function">(<span class="hljs-params">state, _</span>) =&gt;</span> state + <span class="hljs-number">1</span>)<br><br>  <span class="hljs-comment">// handle multiple actions by using array</span><br>  .handleAction([add, increment], <span class="hljs-function">(<span class="hljs-params">state, action</span>) =&gt;</span><br>    state + (action.type === <span class="hljs-string">'ADD'</span> ? action.payload : <span class="hljs-number">1</span>)<br>  );<br><br><span class="hljs-comment">// all the same scenarios are working when using type-constants</span><br><span class="hljs-keyword">const</span> counterReducer = createReducer&lt;State, Action&gt;(<span class="hljs-number">0</span>)<br>  .handleAction(<span class="hljs-string">'ADD'</span>, <span class="hljs-function">(<span class="hljs-params">state, action</span>) =&gt;</span> state + action.payload)<br>  .handleAction(<span class="hljs-string">'INCREMENT'</span>, <span class="hljs-function">(<span class="hljs-params">state, _</span>) =&gt;</span> state + <span class="hljs-number">1</span>);<br>  <br>counterReducer(<span class="hljs-number">0</span>, add(<span class="hljs-number">4</span>)); <span class="hljs-comment">// =&gt; 4</span><br>counterReducer(<span class="hljs-number">0</span>, increment()); <span class="hljs-comment">// =&gt; 1</span><br></code></pre></td></tr></table></figure></p><p>Extend or compose various reducers together - every operation is completely typesafe:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> newCounterReducer = createReducer&lt;State, Action&gt;(<span class="hljs-number">0</span>)<br>  .handleAction(<span class="hljs-string">'SUBTRACT'</span>, <span class="hljs-function">(<span class="hljs-params">state, action</span>) =&gt;</span> state - action.payload)<br>  .handleAction(<span class="hljs-string">'DECREMENT'</span>, <span class="hljs-function">(<span class="hljs-params">state, _</span>) =&gt;</span> state - <span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">const</span> bigReducer = createReducer&lt;State, Action&gt;(<span class="hljs-number">0</span>, &#123;<br>  ...counterReducer.handlers, <span class="hljs-comment">// typesafe</span><br>  ...newCounterReducer.handlers, <span class="hljs-comment">// typesafe</span><br>  SUBTRACT: decrementReducer.handlers.DECREMENT, <span class="hljs-comment">// &lt;= error, wrong type</span><br>&#125;)<br></code></pre></td></tr></table></figure></p><p><a href="#table-of-contents">⇧ back to top</a></p><hr><h3 id="Action-Helpers-API"><a href="#Action-Helpers-API" class="headerlink" title="Action-Helpers API"></a>Action-Helpers API</h3><h4 id="getType"><a href="#getType" class="headerlink" title="getType"></a><code>getType</code></h4><p><em>Get the <strong>type</strong> property value (narrowed to literal type) of given enhanced action-creator.</em></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts">getType(actionCreator)<br></code></pre></td></tr></table></figure><p><a href="src/get-type.spec.ts">&gt; Advanced Usage Examples</a></p><p>Examples:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; getType, createStandardAction &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'typesafe-actions'</span>;<br><br><span class="hljs-keyword">const</span> add = createStandardAction(<span class="hljs-string">'ADD'</span>)&lt;<span class="hljs-built_in">number</span>&gt;();<br><br><span class="hljs-comment">// In switch reducer</span><br><span class="hljs-keyword">switch</span> (action.type) &#123;<br>  <span class="hljs-keyword">case</span> getType(add):<br>    <span class="hljs-comment">// action type is &#123; type: "ADD"; payload: number; &#125;</span><br>    <span class="hljs-keyword">return</span> state + action.payload;<br><br>  <span class="hljs-keyword">default</span>:<br>    <span class="hljs-keyword">return</span> state;<br>&#125;<br><br><span class="hljs-comment">// or with conditional statements</span><br><span class="hljs-keyword">if</span> (action.type === getType(add)) &#123;<br>  <span class="hljs-comment">// action type is &#123; type: "ADD"; payload: number; &#125;</span><br>&#125;<br></code></pre></td></tr></table></figure></p><p><a href="#table-of-contents">⇧ back to top</a></p><h4 id="isActionOf"><a href="#isActionOf" class="headerlink" title="isActionOf"></a><code>isActionOf</code></h4><p><em>Check if action is an instance of given enhanced action-creator(s)<br>(it will narrow action type to a type of given action-creator(s))</em></p><blockquote><p><strong>WARNING</strong>: Regular action creators and <a href="#action">action</a> will not work with this helper</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// can be used as a binary function</span><br>isActionOf(actionCreator, action)<br><span class="hljs-comment">// or as a curried function</span><br>isActionOf(actionCreator)(action)<br><span class="hljs-comment">// also accepts an array</span><br>isActionOf([actionCreator1, actionCreator2, ...actionCreatorN], action)<br><span class="hljs-comment">// with its curried equivalent</span><br>isActionOf([actionCreator1, actionCreator2, ...actionCreatorN])(action)<br></code></pre></td></tr></table></figure><p>Examples:<br><a href="src/is-action-of.spec.ts">&gt; Advanced Usage Examples</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; addTodo, removeTodo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'./todos-actions'</span>;<br><br><span class="hljs-comment">// Works with any filter type function (`Array.prototype.filter`, lodash, ramda, rxjs, etc.)</span><br><span class="hljs-comment">// - single action</span><br>[action1, action2, ...actionN]<br>  .filter(isActionOf(addTodo)) <span class="hljs-comment">// only actions with type `ADD` will pass</span><br>  .map(<span class="hljs-function">(<span class="hljs-params">action</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// action type is &#123; type: "todos/ADD"; payload: Todo; &#125;</span><br>    ...<br>    <br><span class="hljs-comment">// - multiple actions</span><br>[action1, action2, ...actionN]<br>  .filter(isActionOf([addTodo, removeTodo])) <span class="hljs-comment">// only actions with type `ADD` or 'REMOVE' will pass</span><br>  .do(<span class="hljs-function">(<span class="hljs-params">action</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// action type is &#123; type: "todos/ADD"; payload: Todo; &#125; | &#123; type: "todos/REMOVE"; payload: Todo; &#125;</span><br>    ...<br>      <br><span class="hljs-comment">// With conditional statements</span><br><span class="hljs-comment">// - single action</span><br><span class="hljs-keyword">if</span>(isActionOf(addTodo, action)) &#123;<br>  <span class="hljs-keyword">return</span> iAcceptOnlyTodoType(action.payload);<br>  <span class="hljs-comment">// action type is &#123; type: "todos/ADD"; payload: Todo; &#125;</span><br>&#125;<br><span class="hljs-comment">// - multiple actions</span><br><span class="hljs-keyword">if</span>(isActionOf([addTodo, removeTodo], action)) &#123;<br>  <span class="hljs-keyword">return</span> iAcceptOnlyTodoType(action.payload);<br>  <span class="hljs-comment">// action type is &#123; type: "todos/ADD"; payload: Todo; &#125; | &#123; type: "todos/REMOVE"; payload: Todo; &#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><h4 id="isOfType"><a href="#isOfType" class="headerlink" title="isOfType"></a><code>isOfType</code></h4><p><em>Check if action type property is equal given type-constant(s)<br>(it will narrow action type to a type of given action-creator(s))</em></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// can be used as a binary function</span><br>isOfType(<span class="hljs-keyword">type</span>, action)<br><span class="hljs-comment">// or as curried function</span><br>isOfType(<span class="hljs-keyword">type</span>)(action)<br><span class="hljs-comment">// also accepts an array</span><br>isOfType([type1, type2, ...typeN], action)<br><span class="hljs-comment">// with its curried equivalent</span><br>isOfType([type1, type2, ...typeN])(action)<br></code></pre></td></tr></table></figure><p>Examples:<br><a href="src/is-of-type.spec.ts">&gt; Advanced Usage Examples</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; ADD, REMOVE &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'./todos-types'</span>;<br><br><span class="hljs-comment">// Works with any filter type function (`Array.prototype.filter`, lodash, ramda, rxjs, etc.)</span><br><span class="hljs-comment">// - single action</span><br>[action1, action2, ...actionN]<br>  .filter(isOfType(ADD)) <span class="hljs-comment">// only actions with type `ADD` will pass</span><br>  .map(<span class="hljs-function">(<span class="hljs-params">action</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// action type is &#123; type: "todos/ADD"; payload: Todo; &#125;</span><br>    ...<br>    <br><span class="hljs-comment">// - multiple actions</span><br>[action1, action2, ...actionN]<br>  .filter(isOfType([ADD, REMOVE])) <span class="hljs-comment">// only actions with type `ADD` or 'REMOVE' will pass</span><br>  .do(<span class="hljs-function">(<span class="hljs-params">action</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// action type is &#123; type: "todos/ADD"; payload: Todo; &#125; | &#123; type: "todos/REMOVE"; payload: Todo; &#125;</span><br>    ...<br>      <br><span class="hljs-comment">// With conditional statements</span><br><span class="hljs-comment">// - single action</span><br><span class="hljs-keyword">if</span>(isOfType(ADD, action)) &#123;<br>  <span class="hljs-keyword">return</span> iAcceptOnlyTodoType(action.payload);<br>  <span class="hljs-comment">// action type is &#123; type: "todos/ADD"; payload: Todo; &#125;</span><br>&#125;<br><span class="hljs-comment">// - multiple actions</span><br><span class="hljs-keyword">if</span>(isOfType([ADD, REMOVE], action)) &#123;<br>  <span class="hljs-keyword">return</span> iAcceptOnlyTodoType(action.payload);<br>  <span class="hljs-comment">// action type is &#123; type: "todos/ADD"; payload: Todo; &#125; | &#123; type: "todos/REMOVE"; payload: Todo; &#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><hr><h3 id="Type-Helpers-API"><a href="#Type-Helpers-API" class="headerlink" title="Type-Helpers API"></a>Type-Helpers API</h3><p>Below helper functions are very flexible generalizations, works great with nested structures and will cover numerous different use-cases.</p><h4 id="ActionType"><a href="#ActionType" class="headerlink" title="ActionType"></a><code>ActionType</code></h4><p><em>Powerful type-helper that will infer union type from <strong>import * as …</strong> or <strong>action-creator map</strong> object.</em></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; ActionType &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'typesafe-actions'</span>;<br><br><span class="hljs-comment">// with "import * as ..."</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> todos <span class="hljs-keyword">from</span> <span class="hljs-string">'./actions'</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> TodosAction = ActionType&lt;<span class="hljs-keyword">typeof</span> todos&gt;;<br><span class="hljs-comment">// TodosAction: &#123; type: 'action1' &#125; | &#123; type: 'action2' &#125; | &#123; type: 'action3' &#125;</span><br><br><span class="hljs-comment">// with nested action-creator map case</span><br><span class="hljs-keyword">const</span> actions = &#123;<br>  action1: createAction(<span class="hljs-string">'action1'</span>),<br>  nested: &#123;<br>    action2: createAction(<span class="hljs-string">'action2'</span>),<br>    moreNested: &#123;<br>      action3: createAction(<span class="hljs-string">'action3'</span>),<br>    &#125;,<br>  &#125;,<br>&#125;;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> RootAction = ActionType&lt;<span class="hljs-keyword">typeof</span> actions&gt;;<br><span class="hljs-comment">// RootAction: &#123; type: 'action1' &#125; | &#123; type: 'action2' &#125; | &#123; type: 'action3' &#125;</span><br></code></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><h4 id="StateType"><a href="#StateType" class="headerlink" title="StateType"></a><code>StateType</code></h4><p><em>Powerful type helper that will infer state object type from <strong>reducer function</strong> and <strong>nested/combined reducers</strong>.</em></p><blockquote><p><strong>WARNING</strong>: working with redux@4+ types</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; combineReducers &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'redux'</span>;<br><span class="hljs-keyword">import</span> &#123; StateType &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'typesafe-actions'</span>;<br><br><span class="hljs-comment">// with reducer function</span><br><span class="hljs-keyword">const</span> todosReducer = <span class="hljs-function">(<span class="hljs-params">state: Todo[] = [], action: TodosAction</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">switch</span> (action.type) &#123;<br>    <span class="hljs-keyword">case</span> getType(todos.add):<br>      <span class="hljs-keyword">return</span> [...state, action.payload];<br>    ...<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> TodosState = StateType&lt;<span class="hljs-keyword">typeof</span> todosReducer&gt;;<br><br><span class="hljs-comment">// with nested/combined reducers</span><br><span class="hljs-keyword">const</span> rootReducer = combineReducers(&#123;<br>  router: routerReducer,<br>  counters: countersReducer,<br>&#125;);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> RootState = StateType&lt;<span class="hljs-keyword">typeof</span> rootReducer&gt;;<br></code></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><hr><h2 id="Migration-Guides"><a href="#Migration-Guides" class="headerlink" title="Migration Guides"></a>Migration Guides</h2><h3 id="v3-x-x-to-v4-x-x"><a href="#v3-x-x-to-v4-x-x" class="headerlink" title="v3.x.x to v4.x.x"></a><code>v3.x.x</code> to <code>v4.x.x</code></h3><p>From <code>v4.x.x</code> all action creators will use <code>undefined</code> instead of <code>void</code> as a generic type parameter to make the action-creator function require NO parameters.<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> increment = createStandardAction(<span class="hljs-string">'INCREMENT'</span>)&lt;<span class="hljs-literal">undefined</span>&gt;();<br>increment(); <span class="hljs-comment">// &lt;= no parameters required</span><br><br><span class="hljs-keyword">const</span> fetchUsersAsync = createAsyncAction(<br>  <span class="hljs-string">'FETCH_USERS_REQUEST'</span>,<br>  <span class="hljs-string">'FETCH_USERS_SUCCESS'</span>,<br>  <span class="hljs-string">'FETCH_USERS_FAILURE'</span><br>)&lt;<span class="hljs-literal">undefined</span>, User[], <span class="hljs-built_in">Error</span>&gt;();<br>fetchUsersAsync.request(); <span class="hljs-comment">// &lt;= no parameters required</span><br></code></pre></td></tr></table></figure></p><h3 id="v2-x-x-to-v3-x-x"><a href="#v2-x-x-to-v3-x-x" class="headerlink" title="v2.x.x to v3.x.x"></a><code>v2.x.x</code> to <code>v3.x.x</code></h3><p><code>v3.x.x</code> API is backward compatible with <code>v2.x.x</code>. You’ll only need to update typescript dependency to <code>&gt; v3.1</code>.</p><h3 id="v1-x-x-to-v2-x-x"><a href="#v1-x-x-to-v2-x-x" class="headerlink" title="v1.x.x to v2.x.x"></a><code>v1.x.x</code> to <code>v2.x.x</code></h3><p>In v2 we provide a <code>createActionDeprecated</code> function compatible with v1 API to help with incremental migration.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// in v1 we created action-creator like this:</span><br><span class="hljs-keyword">const</span> getTodo = createAction(<span class="hljs-string">'GET_TODO'</span>,<br>  <span class="hljs-function">(<span class="hljs-params">id: <span class="hljs-built_in">string</span>, meta: <span class="hljs-built_in">string</span></span>) =&gt;</span> (&#123;<br>    <span class="hljs-keyword">type</span>: <span class="hljs-string">'GET_TODO'</span>,<br>    payload: id,<br>    meta: meta,<br>  &#125;)<br>);<br><br>getTodo(<span class="hljs-string">'some_id'</span>, <span class="hljs-string">'some_meta'</span>); <span class="hljs-comment">// &#123; type: 'GET_TODO', payload: 'some_id', meta: 'some_meta' &#125;</span><br><br><span class="hljs-comment">// in v2 API we offer few different styles - please choose your preference</span><br><span class="hljs-keyword">const</span> getTodoNoHelpers = <span class="hljs-function">(<span class="hljs-params">id: <span class="hljs-built_in">string</span>, meta: <span class="hljs-built_in">string</span></span>) =&gt;</span> action(<span class="hljs-string">'GET_TODO'</span>, id, meta);<br><br><span class="hljs-keyword">const</span> getTodoWithHelpers = createAction(<span class="hljs-string">'GET_TODO'</span>, <span class="hljs-function"><span class="hljs-params">action</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">id: <span class="hljs-built_in">string</span>, meta: <span class="hljs-built_in">string</span></span>) =&gt;</span> action(id, meta);<br>&#125;);<br><br><span class="hljs-keyword">const</span> getTodoFSA = createStandardAction(<span class="hljs-string">'GET_TODO'</span>)&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt;();<br><br><span class="hljs-keyword">const</span> getTodoCustom = createStandardAction(<span class="hljs-string">'GET_TODO'</span>).map(<br>  <span class="hljs-function">(<span class="hljs-params">&#123; id, meta &#125;: &#123; id: <span class="hljs-built_in">string</span>; meta: <span class="hljs-built_in">string</span>; &#125;</span>) =&gt;</span> (&#123;<br>    payload: id,<br>    meta,<br>  &#125;)<br>);<br></code></pre></td></tr></table></figure><h3 id="Migrating-from-redux-actions-to-typesafe-actions"><a href="#Migrating-from-redux-actions-to-typesafe-actions" class="headerlink" title="Migrating from redux-actions to typesafe-actions"></a>Migrating from <code>redux-actions</code> to <code>typesafe-actions</code></h3><ul><li>createAction(s)</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts">createAction(<span class="hljs-keyword">type</span>, payloadCreator, metaCreator) =&gt; createStandardAction(<span class="hljs-keyword">type</span>)() || createStandardAction(<span class="hljs-keyword">type</span>).map(payloadMetaCreator)<br><br>createActions() =&gt; <span class="hljs-comment">// COMING SOON!</span><br></code></pre></td></tr></table></figure><ul><li>handleAction(s)</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts">handleAction(<span class="hljs-keyword">type</span>, reducer, initialState) =&gt; createReducer(initialState).handleAction(<span class="hljs-keyword">type</span>, reducer)<br><br>handleActions(reducerMap, initialState) =&gt; createReducer(initialState, reducerMap)<br></code></pre></td></tr></table></figure><blockquote><p>TIP: If migrating from JS -&gt; TS, you can swap out action-creators from <code>redux-actions</code> with action-creators from <code>typesafe-actions</code> in your <code>handleActions</code> handlers. This works because the action-creators from <code>typesafe-actions</code> provide the same <code>toString</code> method implementation used by <code>redux-actions</code> to match actions to the correct reducer.</p></blockquote><ul><li>combineActions</li></ul><p>Not needed because each function in the API accept single value or array of values for action types or action creators.</p><p><a href="#table-of-contents">⇧ back to top</a></p><hr><h2 id="Recipes"><a href="#Recipes" class="headerlink" title="Recipes"></a>Recipes</h2><h3 id="Restrict-Meta-type-in-action-creator"><a href="#Restrict-Meta-type-in-action-creator" class="headerlink" title="Restrict Meta type in action creator"></a>Restrict Meta type in <code>action</code> creator</h3><p>Using this recipe you can create an action creator with restricted Meta type with exact object shape.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs tsx">export type MetaType = &#123;<br>  analytics?: &#123;<br>    eventName: string;<br>  &#125;;<br>&#125;;<br><br>export const actionWithRestrictedMeta = &lt;T extends string, P&gt;(<br>  type: T,<br>  payload: P,<br>  meta: MetaType<br>) =&gt; action(type, payload, meta);<br><br>export const validAction = (payload: string) =&gt;<br>  actionWithRestrictedMeta(&apos;type&apos;, payload, &#123; analytics: &#123; eventName: &apos;success&apos; &#125; &#125;); // OK!<br><br>export const invalidAction = (payload: string) =&gt;<br>  actionWithRestrictedMeta(&apos;type&apos;, payload, &#123; analytics: &#123; excessProp: &apos;no way!&apos; &#125; &#125;); // Error<br>// Object literal may only specify known properties, and &apos;excessProp&apos; does not exist in type &apos;&#123; eventName: string; &#125;<br></code></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><hr><h2 id="Compare-to-others"><a href="#Compare-to-others" class="headerlink" title="Compare to others"></a>Compare to others</h2><p>Here you can find out a detailed comparison of <code>typesafe-actions</code> to other solutions.</p><h3 id="redux-actions"><a href="#redux-actions" class="headerlink" title="redux-actions"></a><code>redux-actions</code></h3><p>Lets compare the 3 most common variants of action-creators (with type only, with payload and with payload + meta)</p><p>Note: tested with “@types/redux-actions”: “2.2.3”</p><p><strong>- with type only (no payload)</strong></p><h5 id="redux-actions-1"><a href="#redux-actions-1" class="headerlink" title="redux-actions"></a>redux-actions</h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> notify1 = createAction(<span class="hljs-string">'NOTIFY'</span>);<br><span class="hljs-comment">// resulting type:</span><br><span class="hljs-comment">// () =&gt; &#123;</span><br><span class="hljs-comment">//   type: string;</span><br><span class="hljs-comment">//   payload: void | undefined;</span><br><span class="hljs-comment">//   error: boolean | undefined;</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>with <code>redux-actions</code> you can notice the redundant nullable <code>payload</code> property and literal type of <code>type</code> property is lost (discrimination of union type would not be possible)</p></blockquote><h5 id="typesafe-actions"><a href="#typesafe-actions" class="headerlink" title="typesafe-actions"></a>typesafe-actions</h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> notify1 = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> action(<span class="hljs-string">'NOTIFY'</span>);<br><span class="hljs-comment">// resulting type:</span><br><span class="hljs-comment">// () =&gt; &#123;</span><br><span class="hljs-comment">//   type: "NOTIFY";</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>with <code>typesafe-actions</code> there is no excess nullable types and no excess properties and the action “type” property is containing a literal type</p></blockquote><p><strong>- with payload</strong></p><h5 id="redux-actions-2"><a href="#redux-actions-2" class="headerlink" title="redux-actions"></a>redux-actions</h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> notify2 = createAction(<span class="hljs-string">'NOTIFY'</span>,<br>  <span class="hljs-function">(<span class="hljs-params">username: <span class="hljs-built_in">string</span>, message?: <span class="hljs-built_in">string</span></span>) =&gt;</span> (&#123;<br>    message: <span class="hljs-string">`<span class="hljs-subst">$&#123;username&#125;</span>: <span class="hljs-subst">$&#123;message || 'Empty!'&#125;</span>`</span>,<br>  &#125;)<br>);<br><span class="hljs-comment">// resulting type:</span><br><span class="hljs-comment">// (t1: string) =&gt; &#123;</span><br><span class="hljs-comment">//   type: string;</span><br><span class="hljs-comment">//   payload: &#123; message: string; &#125; | undefined;</span><br><span class="hljs-comment">//   error: boolean | undefined;</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>first the optional <code>message</code> parameter is lost, <code>username</code> semantic argument name is changed to some generic <code>t1</code>, <code>type</code> property is widened once again and <code>payload</code> is nullable because of broken inference</p></blockquote><h5 id="typesafe-actions-1"><a href="#typesafe-actions-1" class="headerlink" title="typesafe-actions"></a>typesafe-actions</h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> notify2 = <span class="hljs-function">(<span class="hljs-params">username: <span class="hljs-built_in">string</span>, message?: <span class="hljs-built_in">string</span></span>) =&gt;</span> action(<br>  <span class="hljs-string">'NOTIFY'</span>,<br>  &#123; message: <span class="hljs-string">`<span class="hljs-subst">$&#123;username&#125;</span>: <span class="hljs-subst">$&#123;message || 'Empty!'&#125;</span>`</span> &#125;,<br>);<br><span class="hljs-comment">// resulting type:</span><br><span class="hljs-comment">// (username: string, message?: string | undefined) =&gt; &#123;</span><br><span class="hljs-comment">//   type: "NOTIFY";</span><br><span class="hljs-comment">//   payload: &#123; message: string; &#125;;</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure><blockquote><p><code>typesafe-actions</code> infer very precise resulting type, notice working optional parameters and semantic argument names are preserved which is really important for great intellisense experience</p></blockquote><p><strong>- with payload and meta</strong></p><h5 id="redux-actions-3"><a href="#redux-actions-3" class="headerlink" title="redux-actions"></a>redux-actions</h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> notify3 = createAction(<span class="hljs-string">'NOTIFY'</span>,<br>  <span class="hljs-function">(<span class="hljs-params">username: <span class="hljs-built_in">string</span>, message?: <span class="hljs-built_in">string</span></span>) =&gt;</span> (<br>    &#123; message: <span class="hljs-string">`<span class="hljs-subst">$&#123;username&#125;</span>: <span class="hljs-subst">$&#123;message || 'Empty!'&#125;</span>`</span> &#125;<br>  ),<br>  <span class="hljs-function">(<span class="hljs-params">username: <span class="hljs-built_in">string</span>, message?: <span class="hljs-built_in">string</span></span>) =&gt;</span> (<br>    &#123; username, message &#125;<br>  )<br>);<br><span class="hljs-comment">// resulting type:</span><br><span class="hljs-comment">// (...args: any[]) =&gt; &#123;</span><br><span class="hljs-comment">//   type: string;</span><br><span class="hljs-comment">//   payload: &#123; message: string; &#125; | undefined;</span><br><span class="hljs-comment">//   meta: &#123; username: string; message: string | undefined; &#125;;</span><br><span class="hljs-comment">//   error: boolean | undefined;</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>this time we got a completely broken arguments arity with no type-safety because of <code>any</code> type with all the earlier issues</p></blockquote><h5 id="typesafe-actions-2"><a href="#typesafe-actions-2" class="headerlink" title="typesafe-actions"></a>typesafe-actions</h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/**<br> * typesafe-actions<br> */</span><br><span class="hljs-keyword">const</span> notify3 = <span class="hljs-function">(<span class="hljs-params">username: <span class="hljs-built_in">string</span>, message?: <span class="hljs-built_in">string</span></span>) =&gt;</span> action(<br>  <span class="hljs-string">'NOTIFY'</span>,<br>  &#123; message: <span class="hljs-string">`<span class="hljs-subst">$&#123;username&#125;</span>: <span class="hljs-subst">$&#123;message || 'Empty!'&#125;</span>`</span> &#125;,<br>  &#123; username, message &#125;,<br>);<br><span class="hljs-comment">// resulting type:</span><br><span class="hljs-comment">// (username: string, message?: string | undefined) =&gt; &#123;</span><br><span class="hljs-comment">//   type: "NOTIFY";</span><br><span class="hljs-comment">//   payload: &#123; message: string; &#125;;</span><br><span class="hljs-comment">//   meta: &#123; username: string; message: string | undefined; &#125;;</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure><blockquote><p><code>typesafe-actions</code> never fail to <code>any</code> type, even with this advanced scenario all types are correct and provide complete type-safety and excellent developer experience </p></blockquote><p><a href="#table-of-contents">⇧ back to top</a></p><hr><h2 id="MIT-License"><a href="#MIT-License" class="headerlink" title="MIT License"></a>MIT License</h2><p>Copyright (c) 2017 Piotr Witek <a href="mailto:&#x70;&#105;&#x6f;&#116;&#114;&#x65;&#107;&#x2e;&#119;&#105;&#116;&#101;&#x6b;&#x40;&#103;&#x6d;&#97;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;" target="_blank" rel="noopener">&#x70;&#105;&#x6f;&#116;&#114;&#x65;&#107;&#x2e;&#119;&#105;&#116;&#101;&#x6b;&#x40;&#103;&#x6d;&#97;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;</a> (<a href="http://piotrwitek.github.io" target="_blank" rel="noopener">http://piotrwitek.github.io</a>)</p>]]></content>
      
      
      
        <tags>
            
            <tag> redux,react,javascript,typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构建electron、typescript、react、antd应用</title>
      <link href="/2019/06/14/cjxzoi3nb001kjcu9gjwn2gld/"/>
      <url>/2019/06/14/cjxzoi3nb001kjcu9gjwn2gld/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这个研究了很旧，还没研究透，先记录，以免忘记</p></blockquote><a id="more"></a><h2 id="1-初始化react项目"><a href="#1-初始化react项目" class="headerlink" title="1. 初始化react项目"></a>1. 初始化react项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">create-react-app demo --typescript<br></code></pre></td></tr></table></figure><h2 id="2-添加相关依赖-表如下"><a href="#2-添加相关依赖-表如下" class="headerlink" title="2. 添加相关依赖, 表如下"></a>2. 添加相关依赖, 表如下</h2><table><thead><tr><th>包名</th><th>介绍</th><th>安装方式</th></tr></thead><tbody><tr><td><a href="https://electronjs.org/" target="_blank" rel="noopener">electron</a></td><td>关键包，构建electron应用必须</td><td>-D</td></tr><tr><td><a href="https://github.com/mackyle/sqlite" target="_blank" rel="noopener">sqlite3</a></td><td>数据库支持，需要存储数据的话，推荐这个</td><td>-P</td></tr><tr><td><a href="https://ant.design/docs/react/introduce-cn" target="_blank" rel="noopener">antd</a></td><td>蚂蚁金服提供的React框架</td><td>-P</td></tr><tr><td><a href="https://github.com/ReactTraining/react-router" target="_blank" rel="noopener">react-router-dom</a></td><td>提供路由支持</td><td>-P</td></tr><tr><td><a href="https://github.com/typeorm/typeorm" target="_blank" rel="noopener">typeorm</a></td><td>适用于Typescript的ORM支持</td><td>-P</td></tr><tr><td><a href="https://github.com/tealeg/xlsx" target="_blank" rel="noopener">xlsx</a></td><td>读取excel文件，也可以创建excel文件</td><td>-P</td></tr><tr><td><a href="https://github.com/sail-sail/ejsExcel" target="_blank" rel="noopener">ejsexcel</a></td><td>通过模板的方式生成excel文件</td><td>-P</td></tr><tr><td><a href="https://github.com/sindresorhus/electron-is-dev" target="_blank" rel="noopener">electron-is-dev</a></td><td>用于在逻辑中判断当前是否开发模式，因为打包后一些路径会变，<br>这个可以判断当前是否打包以便选择路径</td><td>-P</td></tr><tr><td><a href="https://github.com/megahertz/electron-log" target="_blank" rel="noopener">electron-log</a></td><td>日志支持</td><td>-P</td></tr><tr><td><a href="https://github.com/ashtuchkin/iconv-lite" target="_blank" rel="noopener">iconv-lite</a></td><td>添加更多编码支持，window蛋疼的不使用utf-8，<br>node又不支持GBK，所以需要这个</td><td>-P</td></tr><tr><td><a href="https://github.com/lodash/lodash" target="_blank" rel="noopener">lodash</a></td><td>著名的javascript工具库</td><td>-P</td></tr><tr><td><a href="https://github.com/moment/moment" target="_blank" rel="noopener">moment</a></td><td>时间处理库</td><td>-P</td></tr><tr><td><a href="https://github.com/timarney/react-app-rewired" target="_blank" rel="noopener">react-app-rewired</a></td><td>因为<code>create-react-app</code>的配置文件都是不对外透明的，<br>这个可以让<code>create-react-app</code> 加载的时候，额外对现有配置进行修改</td><td>-D</td></tr><tr><td><a href="https://github.com/arackaf/customize-cra" target="_blank" rel="noopener">customize-cra</a></td><td>配合<code>react-app-rewired</code> 来使用，快速写一下配置</td><td>-D</td></tr><tr><td><a href="https://github.com/electron/electron-rebuild" target="_blank" rel="noopener">electron-rebuild</a></td><td>一些需要需要根据系统编译的库，比如 <code>sqlite3</code> 如果直接安装会出现不兼容问题，<br>然后就会死活找不到这个库，通过这个可以根据现有的版本进行重新编译</td><td>-D</td></tr><tr><td><a href="https://github.com/electron-userland/electron-builder" target="_blank" rel="noopener">electron-builder</a></td><td>用于打包项目，生成安装包</td></tr></tbody></table><p>以上就是我这个项目用到的包，感谢 GitHub 这个开源平台，感觉包作者的大大们，谢谢！！！ :smile: </p><h2 id="3-配置项目需要的基础代码"><a href="#3-配置项目需要的基础代码" class="headerlink" title="3. 配置项目需要的基础代码"></a>3. 配置项目需要的基础代码</h2><ol><li>添加 <code>electron</code> 的入口文件 <code>/public/main.js</code> </li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Modules to control application life and create native browser window</span><br><span class="hljs-keyword">const</span> &#123; app, BrowserWindow, ipcMain &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>);<br><span class="hljs-keyword">const</span> isDev = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron-is-dev'</span>)<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>)<br><span class="hljs-keyword">const</span> log = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron-log'</span>);<br><span class="hljs-comment">// Keep a global reference of the window object, if you don't, the window will</span><br><span class="hljs-comment">// be closed automatically when the JavaScript object is garbage collected.</span><br><span class="hljs-keyword">let</span> mainWindow;<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createWindow</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-comment">// Create the browser window.</span><br>    mainWindow = <span class="hljs-keyword">new</span> BrowserWindow(&#123;<br>        <span class="hljs-attr">width</span>: <span class="hljs-number">1700</span>,<br>        <span class="hljs-attr">height</span>: <span class="hljs-number">1000</span>,<br>        <span class="hljs-attr">minHeight</span>: <span class="hljs-number">1000</span>,<br>        <span class="hljs-attr">minWidth</span>: <span class="hljs-number">1700</span>,<br>        <span class="hljs-attr">webPreferences</span>: &#123;<br>            <span class="hljs-attr">nodeIntegration</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">webSecurity</span>: <span class="hljs-literal">false</span>,<br>        &#125;,<br>        <span class="hljs-attr">autoHideMenuBar</span>: <span class="hljs-literal">true</span>,<br>    &#125;)<br><br>    <span class="hljs-comment">// 这里就是初始化的时候加载的页面，由于打包之后使用的是静态文件，开发时候使用的是服务器，所有这里要分开处理，electron-is-dev 库的重要性</span><br>    <span class="hljs-keyword">const</span> htmlUrl = <span class="hljs-string">`file://<span class="hljs-subst">$&#123;path.join(__dirname, <span class="hljs-string">'../build/index.html#login'</span>)&#125;</span>`</span>;<br>    <span class="hljs-keyword">const</span> url = isDev ? <span class="hljs-string">"http://127.0.0.1:3000#/login"</span> : htmlUrl;<br>    log.info(url);<br>    mainWindow.loadURL(url);<br>    <span class="hljs-comment">// 因为开发的时候 electron 虽然使用chrome内核，但是不没有任何chrmoe插件。开发React的时候最好有 React dev tools 插件，所以可以通过以下的方式来加载额外的插件，路径是插件安装在chrmoe的路径，有点难找，可以配合 Everything 来查找</span><br>    <span class="hljs-keyword">if</span> (isDev) &#123;<br>        BrowserWindow.addDevToolsExtension(<span class="hljs-string">'C:\\Users\\kirno\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Extensions\\fmkadmapgofadopljbjfkapdkoienihi\\3.6.0_0'</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// Open the DevTools.</span><br>    <span class="hljs-comment">// mainWindow.webContents.openDevTools()</span><br><br>    <span class="hljs-comment">// Emitted when the window is closed.</span><br>    mainWindow.on(<span class="hljs-string">'closed'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// Dereference the window object, usually you would store windows</span><br>        <span class="hljs-comment">// in an array if your app supports multi windows, this is the time</span><br>        <span class="hljs-comment">// when you should delete the corresponding element.</span><br>        mainWindow = <span class="hljs-literal">null</span><br>    &#125;)<br><span class="hljs-comment">// 这里线程间通信用的，electron 主要分为 主线程（浏览器）和渲染线程 (网页) 的形式运行，有些事情在网页里是比较难实现，就可以通过这种方式让浏览器帮你做。下面是实现获取系统打印机列表的功能</span><br>    ipcMain.on(<span class="hljs-string">'obtainPrinterList'</span>, (event) =&gt; &#123;<br>        <span class="hljs-keyword">const</span> printers = mainWindow.webContents.getPrinters();<br>        mainWindow.webContents.send(<span class="hljs-string">'getPrinterList'</span>, printers);<br>    &#125;);<br>&#125;<br><br><span class="hljs-comment">// This method will be called when Electron has finished</span><br><span class="hljs-comment">// initialization and is ready to create browser windows.</span><br><span class="hljs-comment">// Some APIs can only be used after this event occurs.</span><br>app.on(<span class="hljs-string">'ready'</span>, createWindow)<br><br><span class="hljs-comment">// Quit when all windows are closed.</span><br>app.on(<span class="hljs-string">'window-all-closed'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// On macOS it is common for applications and their menu bar</span><br>    <span class="hljs-comment">// to stay active until the user quits explicitly with Cmd + Q</span><br>    <span class="hljs-keyword">if</span> (process.platform !== <span class="hljs-string">'darwin'</span>) app.quit()<br>&#125;)<br><br>app.on(<span class="hljs-string">'activate'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// On macOS it's common to re-create a window in the app when the</span><br>    <span class="hljs-comment">// dock icon is clicked and there are no other windows open.</span><br>    <span class="hljs-keyword">if</span> (mainWindow === <span class="hljs-literal">null</span>) createWindow()<br>&#125;)<br><br><span class="hljs-comment">// In this file you can include the rest of your app's specific main process</span><br><span class="hljs-comment">// code. You can also put them in separate files and require them here.</span><br></code></pre></td></tr></table></figure><ol start="2"><li>在<code>package.json</code>文件中添加脚本，辅助开发，以下是节选内容</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>"scripts": &#123;<br>        "ele": "electron .",<br>        "pub": "build --publish always",<br>        /* 重新编译 */<br>        "rebuild": "electron-rebuild",<br>        /* 开发运行 */<br>        "start": "react-app-rewired start",<br>        "build": "react-app-rewired build",<br>        "test": "react-app-rewired test",<br>        "eject": "react-scripts eject",<br>        "postinstall": "electron-builder install-app-deps",        <br>        "buil": "electron-builder install-app-deps",<br>        "preelectron-pack": "yarn build",<br>        /* 打包 */<br>        "electron-dist": "build -w",<br>        /* 打包，但不生成安装包文件 */<br>        "electron-pack": "electron-builder --dir",<br>        "release": "build"<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来就可以进行开发了。以下记录几个问题</p><h2 id="typeorm-的问题"><a href="#typeorm-的问题" class="headerlink" title="typeorm 的问题"></a><code>typeorm</code> 的问题</h2><ol><li><p>无法找到 sqlite3 的包，原因可能有两个，一个是sqlite3直接安装后，和electron的版本不符合。可以通过 <code>electron-build</code> 库解决，重新编译即可；二是因为导入的方式不对，如果使用 </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123;xxxx&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'typeorm'</span><br></code></pre></td></tr></table></figure><p>的话，由于设计到c这种第三方底层库，然而 <code>electron</code> 的渲染线程是没有办法访问这种底层代码的，所以导致无法<code>typrorm</code> 底层无法调用成功，所以这里要借助 <code>electron</code> 的函数 <code>require</code> 方法来引入，实际上就是让 electron 来帮我们导包。但是如果使用 <code>require</code> 的方法来导包，就会失去 <code>typescript</code> 的类型优势，以下是解决方法：</p><ol><li><p>新建一个 <code>libary.js</code> 文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; getConnection, getRepository &#125; = <span class="hljs-built_in">window</span>.require(<span class="hljs-string">'typeorm'</span>);<br><span class="hljs-built_in">module</span>.exports = &#123; getConnection, getRepository &#125;<br></code></pre></td></tr></table></figure></li><li><p>新建 <code>libary.d.ts</code> 文件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">declare</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRepository</span>&lt;<span class="hljs-title">Entity</span>&gt;(<span class="hljs-params">entityClass: ObjectType&lt;Entity&gt; | EntitySchema&lt;Entity&gt; | <span class="hljs-built_in">string</span>, connectionName?: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">Repository</span>&lt;<span class="hljs-title">Entity</span>&gt;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">declare</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getConnection</span>(<span class="hljs-params">connectionName?: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">Connection</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>再要使用的地方引入</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; getRepository, getConnection &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'../libary'</span>;<br></code></pre></td></tr></table></figure></li></ol><p>即可，这里制作了两个常用方法的实例，其他方法也是这样引如。这样就不会丢失 类型。这个方法同样适用于引入 electron 对象。</p></li><li><p>打包问题，由于<code>webpack</code>会把所有引入的文件都进行打包，然而<code>typeorm</code>因为 要兼容多种数据库，所以底层会引入多中数据库的包，但是因为我们只用一种数据，其他的没有，所以打包的时候会报错。解决办法就是让 <code>webpack</code>不要打包那些多余没用到的库，在实际要用的时候再引入。</p><ol><li><p>由于 <code>create-react-app</code>的配置文件是赢藏的，所以通过 <a href="https://github.com/timarney/react-app-rewired" target="_blank" rel="noopener">react-app-rewired</a> 和 <a href="https://github.com/arackaf/customize-cra" target="_blank" rel="noopener">customize-cra</a> 配合修改，新建 <code>/config-overrides.js</code> 文件，以下还提到了两种打包目标模式，具体可以去<code>webpack</code>官网查看</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; addLessLoader, override, addWebpackExternals, fixBabelImports &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">'customize-cra'</span>);<br><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-attr">webpack</span>: override(<br>        <span class="hljs-comment">// 添加less支持</span><br>        addLessLoader(&#123;<br>            <span class="hljs-attr">javascriptEnabled</span>: <span class="hljs-literal">true</span>,<br>        &#125;),<br>        <span class="hljs-comment">// 重点： 取消不必要的库的打包</span><br>        addWebpackExternals(&#123;<br>            <span class="hljs-string">'pg'</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-string">'pg-hstore'</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-string">'mysql2'</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-string">'react-native-sqlite-storage'</span>: <span class="hljs-literal">true</span>,<br>        &#125;),<br>        <span class="hljs-comment">// 客户端使用 electron-renderer方式渲染</span><br>        (config) =&gt; &#123;<br>            config.target = <span class="hljs-string">"electron-renderer"</span>;<br>            <span class="hljs-keyword">return</span> config;<br>        &#125;,<br>        (config) =&gt; &#123;<br>            config.optimization.minimize = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">return</span> config;<br>        &#125;,<br>    ),<br>    <span class="hljs-comment">// 服务端使用 electron-main方式渲染</span><br>    devServer: <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>        config.target = <span class="hljs-string">"electron-main"</span>;<br>        <span class="hljs-keyword">return</span> config;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h2 id="路径问题"><a href="#路径问题" class="headerlink" title="路径问题"></a>路径问题</h2><p>由于打包版本和开发版本存在路径差异，所以需要引入 <code>electron-is-dev</code>包来判断当前的环境。</p><p>数据存储路径建议放大 <code>electron.app.getAppPath()</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> electron, typescript, react, antd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/01/27/cjxzoi3mg000ojcu9qg5setqx/"/>
      <url>/2019/01/27/cjxzoi3mg000ojcu9qg5setqx/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-11-04日记</title>
      <link href="/2018/11/05/cjxzoi3ly000cjcu9bbr5ji1c/"/>
      <url>/2018/11/05/cjxzoi3ly000cjcu9bbr5ji1c/</url>
      
        <content type="html"><![CDATA[<p>今天周日，双休的最后一天。早上起床后忘了干啥，妈妈他们估计出去找彤彤玩了。大概10点多说叫我们准备一下去吃饭，然后就出去了，我们走路过去，在南海橡塑城那边沿夏西的方向一家叫 鱼虾蟹 的点。海鲜叫了带子，虾，其他的还有 熟煮牛肉，菠萝排骨，酿豆腐，蒜蓉芥蓝，松子鱼，三文鱼腩，多宝鱼鱼片，就记得这么多了，其中松子鱼是中间点的，大家都吃饱都还没有上菜。<br>回去后，小舅说要走了，我就再楼下车里面小睡了一会，他上去拿东西，然后送她去了平洲的一个公交站坐275，回来的路塞了，逗了一个圈才回来。<br>回来后玩了一下午的GTA，好久没有玩了，其实还不错，有一个破坏销售牌的任务，之前一直失败，老是忘记哪里没有破坏。这次用手机做记录，总算是完成了。</p><p><img src="1.jpg" width="20%"></p><p>今天也是没跑步，晚上去了姐家吃蛋糕，好贵啊，180+的蛋糕，本来让我买的，后来算了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018-11-03日记</title>
      <link href="/2018/11/05/cjxzoi3lc0002jcu9os70y54o/"/>
      <url>/2018/11/05/cjxzoi3lc0002jcu9os70y54o/</url>
      
        <content type="html"><![CDATA[<p>今天周六，可以休息的日子，昨天小舅过来了。明天姐的二女儿满月，他过来一起庆祝。明明还是个婴儿，你们都大吃大喝的庆祝，她只能眼巴巴的看着，只能喝奶，真的好吗。<br>今天没有出去，久违的在家里呆了一整天，早上起来已经9点多了，妈妈他们去全名健身广场完了，以为他们会叫我，但是没有。起来后吃了个早餐，白粥+炒米粉。看《咋们穿越吧》，因为里面有张卫健，所以就看看，挺不错的，比奔跑那些有内容。中午吃了饺子，给她煮了11个馄饨，因为她说只要10个，我就拿走了一个。<br>下午爸去了公司，说下午要开会，晚上回来。我2点多睡了个午觉，一直睡到5点多。好久没睡那么久的午觉了，以至于晚上有点睡不着。今天也没有跑步，晚上和妈妈打麻将，也是一直输，就找到一元钱而已。佩莲给我了25，最后让我爸玩，他回来了，输了多少就不知道了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018-11-02日记</title>
      <link href="/2018/11/02/cjxzoi3ll0006jcu9cy80o1tb/"/>
      <url>/2018/11/02/cjxzoi3ll0006jcu9cy80o1tb/</url>
      
        <content type="html"><![CDATA[<p>今早拉肚子了，昨晚1点多的时候饿了，跑起来喝了个谷粒多，吃了剩下的面包。然后早上我先上了个厕所，想着先让老婆去洗漱，就回房间继续睡觉，然后突然就肚子痛，然后上厕所，非常的烂。然后今天早上拉了3回。<br>早上吃的是排骨粥，中午吃的是饭，有豆角，猪脚，肉饼。<br>老婆说眼霜有可能是假的，哇……几百块的东西，吓到了。后来说是包装不同……唉，谁知道了，化妆品的东西深似海啊。<br>下午仲伯的张国军来了，还是之前的维护的事情，嘛……不太想同意，因为懒，而且他们老油条，不太敢和他们合作，还是直接给钱现实点。<br>晚上小舅来了，晚餐相对丰富些。张国军说8点半开会，但是我8点都还没吃饭，于是就和他们说推迟点。可是居然在8点30分没到就吃完了，喝了汤，非常的饱，感觉这几天都白跑步了。然后拖到快9点的时候，我链接了进去开会，开到差不到11点才结束，所以才不想和他们开会，太婆婆妈妈了。结论我这边写一个excel模板的Demo。今晚妈妈想打麻将，不过我要开会，就没有打，也没有跑步。<br>今天没有消费，自从家里带饭，每天0消费，什么的😁</p>]]></content>
      
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018-11-01日记</title>
      <link href="/2018/11/01/cjxzoi3m4000fjcu9hsd3gx8k/"/>
      <url>/2018/11/01/cjxzoi3m4000fjcu9hsd3gx8k/</url>
      
        <content type="html"><![CDATA[<p>今天3点多的时候老婆说肚子痛醒了，然后把我也吵醒了……问他要不要去医院，她说先不用，我就和他说那天亮了和她去吧。然后我睡之前又说了下，如果要去就来叫醒我。这个一定要记下来，因为她抱怨说她肚子痛，我居然说天亮才送她去医院，愿望啊。早上6点起来，送她去了医院看了急症，她花费了 44 元多吧，看病用的。开了些药，验了个血常规，白细胞多了，典型的验证，估计是细菌感染了。<br>回到家已经快9点半了，吃了个早餐，妈妈煮的猪肉粥。然后补了下觉，差不多11点多的时候出发去上班，下到单车房才想起来忘记带中午饭了，又跑回去拿。在车上看到说新的硬盘到了，很兴奋，一回到办公室就找快递。发现她的眼霜也到了，买了好久，终于到货了。</p><img src="/2018/11/01/cjxzoi3m4000fjcu9hsd3gx8k/2.jpg" title="拆开前"> <img src="/2018/11/01/cjxzoi3m4000fjcu9hsd3gx8k/1.jpg" title="拆开后"><p>天啊，这两个东西的价格基本一样的。哼，女人的SSD。<br>中午吃的饺子。</p><p>下午做了个神奇的软件，看小视频的，哈哈，因为那个网实在太快了，而且又不用墙，于是就捣鼓了一下。好久没有写ract-native了，好多都忘记了，哈哈，放歌截图先</p><p><img src="3.jpeg" width="20%"></p><p>速度很快，不过不咋更新的样子，现在也爬取了首页而已，等有空了，就再改改。<br>硬盘到了，所以网上都在搞电脑，没有去跑步，一开始速度有问题，写速度才300不到，后台突然掉盘了，然后识别不了硬盘，换了一根，还是不行，以为是SSD的问题，换到HDD硬盘也不行，原来换的线本身也有问题……。还好主板没有问题，捣鼓到11点多，不搞了，去洗澡，准备睡觉了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018-10-31日记</title>
      <link href="/2018/11/01/cjxzoi3m9000kjcu998orfohf/"/>
      <url>/2018/11/01/cjxzoi3m9000kjcu998orfohf/</url>
      
        <content type="html"><![CDATA[<p>今天比较早出门，因为今天要去天安数码城那边开会，早上吃的啥又忘了，下次拍照记录吧。<br>老婆今天也上班了，本来说去医院的，后来又说不用了，先看看情况再说。来到公司大概9点钟，时间差不多，因为我打算骑自行车去天安。去到电梯，想起带唇膏，已近进入秋季了，天气有点冷了，很干燥，嘴唇开始不舒服了。<br>去到了天安，差一两分钟，没迟到，不过他们讲的是他们的旧系统的事情。大概的意思是想把旧系统和新系统一起进行维护……这样一来，工作量就又大了。会议开完之后我就回来了，不想和他们吃饭，不过我也是后来才想起来我带饭了，还有没有和他们吃，也是骑自行车回来的。<br>回来时路过一个卖豆腐花的，忍不住叫了一碗。她还有双皮奶卖，不过我担心质量问题，就没有要，只要了豆腐花<code>3元</code>。中午是吃带的饭，和妈妈说想重新带饭，于是中午就有饭吃了，唉，果然离不开母亲啊。莲藕猪肉，木耳芹菜，哈哈吃太多了，好久中午没吃那么饱了。<br>下午和林俊鑫讨论了一下《画像》的项目，这个项目也托挺久的了，他们的需求也大改了一番。然后后来才知道他们还有5k元的项目费没有给。<br>晚上跑了20分钟步，然后还做了几个基本的腹部肌肉运动。今天比较早下去，想着今天是万圣节，然而下去后也没啥看的。今年没有上一年那么热闹。<br>晚上京东给我我电话，说东西修要好久，给我换个其他的， intel 的 256g 的固态硬盘。对于我来说当然好，毕竟我那么已经快3年了，现在给我个新的，而且是intel的，哈哈。内存还是没有寄出去，太麻烦了，昨天快递员说最近的自提点都在石湾，太麻烦了。而且上次检测内存似乎没有问题，所以就不修了。新硬盘到了试试，看看还会不会总是蓝屏再说。</p><img src="/2018/11/01/cjxzoi3m9000kjcu998orfohf/1.jpg" title="万圣节拍到的快闪"><p>这是我现在的体型，现在开始运动，相信不久的将来，定能拥有8块腹肌 ☺ ️</p><img src="/2018/11/01/cjxzoi3m9000kjcu998orfohf/3.jpg" title="最新的个人照片"><table><thead><tr><th>花费项</th><th>金额</th></tr></thead><tbody><tr><td>膜拜单车</td><td>1</td></tr><tr><td>膜拜单车</td><td>1</td></tr><tr><td>豆腐花</td><td>3</td></tr></tbody></table><p>真是一个省钱的日子呢。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018-10-29日记</title>
      <link href="/2018/10/30/cjxzoi3l00000jcu92r6grvyv/"/>
      <url>/2018/10/30/cjxzoi3l00000jcu92r6grvyv/</url>
      
        <content type="html"><![CDATA[<p>今天早上过了一遍跟单宝的接口，发现还有有比较多问题的，于是就没有做下去了，把几个有的界面完善了。<br>中午吃的三津，咸鱼蒸肉饭，她吃了酱油鸡饭。下午给了包新买的牛奶她喝，不过他旁晚的时候过来说肠子不舒服，说可能是喝牛奶喝的，也不知道说什么好，我虽然这几天都拉肚子，但是至少不会痛。不过今天还行，没有怎么拉肚子了。<br>晚上大概6点45左右回去的。晚餐是排骨胡萝卜粉葛汤，其他忘了，吃的米饭，有汤喝就是容易吃得太饱。吃完饭去弄了一下电脑，那台电脑自从换了主板就各种容易蓝屏卡死，后来想会不会是硬盘问题，而不是内存问题，一看开机C盘占用率一直100%不下来，看来是了。然后做了一下硬盘检测，果然有坏道。于是申请了售后，一看是2015-11-11日买的，差几天就过3年保修了，还好，本来想放图片的，奈何mac读取不了图片，fuck。怕第二天忘记带，就拆了下来。放到了外面的桌子上。<br>在快21点30分的时候去跑了一下步，沿着河边往姐方向家跑去，在藕田公园兜圈。两天没有跑了，跑了15分钟左右就不行了，主要是呼吸太干燥不舒服，其他还好。<br>然后去姐家做了一会，他们家在看儿童音乐。妹妹在睡觉，姐说诚哥今晚不回来，他越来越忙的样子。大概快22点的时候回了家，叫妈妈煮了个自己做的酒，有点酸，没有米酒好喝，然后看了下精灵旅社3，在23点左右准备洗澡睡觉了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018-10-30日记</title>
      <link href="/2018/10/30/cjxzoi3li0005jcu9cp1urwm8/"/>
      <url>/2018/10/30/cjxzoi3li0005jcu9cp1urwm8/</url>
      
        <content type="html"><![CDATA[<p>今天找了一下记日记的软件，挺难找的，找不到符合心意的，觉得还行的又要钱，麻烦。<br>好多次说要记日记都是记了几天就坚持不下去了，这次不知道能坚持多久，唉……</p><p>今天她没有来上班，说是肠胃不舒服，叫她去医院，她说去一次没几百元的，不想去。那就算了，她身体一直容易出问题，叫她和我去跑步又各种理由，管她呢，烦死了，总是听她说这里不舒服那里不舒服的，自己又不注意，越来越不想管她了。<br>下午她发信息过来，说要吃完了。今晚回去买点给她才行。</p><p><img src="http://kirno-markdown.oss-cn-shenzhen.aliyuncs.com/18-10-30/78244602.jpg" width="30%"></p><p>今天一个人来上班，11点左右有一个人来说要录企业信息，找了一下营业执照给他，然后我就返回在后面的柜筒的第二格里面（记下来，免得以后找忘了）。<br>下午还是想换一个日记软件，于是看中了hexo，这个东西毕竟是开源的，自由度非常的高，而且使用的github服务器，安全也不错，但是有几个问题</p><p>文章加密<br>首页筛选</p><p>第一个问题很好解决，使用了 hexo-blog-encrypt 这个插件解决了。但是第二个问题，总不可能在首页显示日志那么傻逼吧，所以就动手解决，看了很久模板代码，由于它是ejs写的，之前没用过，所以各种不适应。最终解决了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;% page.posts.each(function(post, i)&#123; %&gt;<br>  &lt;% let isOk = true; %&gt;<br>  &lt;% post.tags.limit(3).each(function (tag) &#123; %&gt;<br>      &lt;% isOk = true; %&gt;<br>      &lt;% console.log(&apos;tag为&apos;+tag.name) %&gt;<br>      &lt;% if(tag.name === &apos;日记&apos;)&#123;isOk = false;&#125; %&gt;<br>    &lt;% &#125;); %&gt; <br>  &lt;% if(isOk)&#123; %&gt;<br>    &lt;%- partial(&apos;archive-post&apos;, &#123;post: post, even: i % 2 == 0&#125;) %&gt;      <br>  &lt;% &#125; %&gt; <br>&lt;% &#125;) %&gt;<br></code></pre></td></tr></table></figure><p>但是这个办法也是很笨戳，因为是把查出来的数据再判断一次。后来发现可以再查询出来的时候进行一次过滤。<br>方法研究中…</p><p>算了，放弃了</p><p>今晚也跑步了，哈哈，整整20分钟，没有偷鸡了。算下来也有7天，嘻嘻</p>]]></content>
      
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dnsCheck</title>
      <link href="/2018/07/10/cjxzoi3mb000mjcu97vkaxzkn/"/>
      <url>/2018/07/10/cjxzoi3mb000mjcu97vkaxzkn/</url>
      
        <content type="html"><![CDATA[<p>使用dig命令进行检测。<br>运行 dig 主机记录命令进行检测或者运行 dig 主机记录 @8.8.8.8命令指定使用谷歌DNS进行验证。例如， dig txt b.aliyuntest.com @8.8.8.8。<br><img src="http://oepv0v7je.bkt.clouddn.com/18-7-10/92556404.jpg" alt><br>如果返回结果中存在类似图示中的TXT记录，且记录值与订单进度页面中的记录值一致，表示您的DNS配置正确且已生效；如果记录值不同，请按照订单进度页面中的记录值在DNS域名解析服务商处更新该验证记录。<br>如果返回结果中不存在TXT记录，可能是DNS配置有误或者配置未生效。如配置错误，请按照订单进度页面中的配置要求在DNS域名解析服务商处重新配置；如果配置长时间未生效，请联系域名托管商。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令</title>
      <link href="/2018/07/02/cjxzoi3m6000hjcu9vm1xdi4c/"/>
      <url>/2018/07/02/cjxzoi3m6000hjcu9vm1xdi4c/</url>
      
        <content type="html"><![CDATA[<ol><li>查看apt-get下载的软件的位置</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>gitlab安装教程</title>
      <link href="/2018/06/28/cjxzoi3n9001jjcu9ye57ynw9/"/>
      <url>/2018/06/28/cjxzoi3n9001jjcu9ye57ynw9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一片关于GitLab的安装教程以及踩过的坑</p></blockquote><p>浪费了一个下午的时间，终于把Gitlab搭建完成，搭建环境如下：</p><ul><li><p>系统（虚拟机）</p><p>  Distributor ID:    Ubuntu</p><p>  Description:    Ubuntu 18.04 LTS</p><p>  Release:    18.04</p><p>  Codename:    bionic</p></li><li><p>gitlab V11.0.1</p></li></ul><a id="more"></a><h2 id="安装Gitlab"><a href="#安装Gitlab" class="headerlink" title="安装Gitlab"></a>安装Gitlab</h2><p>这里有一个问题，gitlab官方源太慢了，一个gitlab安装包要<code>500M+</code>如果直接下载，很容易挂掉，或者等很久，所以这里要替换源。不过似乎在阿里云上搭载的话，会很快，不用更换。</p><p>这里推荐 <a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">清华大学开源软件镜像站</a> 里面有不少的镜像源，其中就包括了gitlab的。</p><p>具体地址是</p><pre><code>deb http://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu bionic main</code></pre><blockquote><p>注意其中 <code>bionic</code> 是系统代号，比如我的ubuntu 18 代号就是 <code>bionic</code> 其他的系统可以使用 <code>lsb_relase</code> 命令自行查询。</p></blockquote><p><strong>使用方法</strong> <a href="https://mirrors.tuna.tsinghua.edu.cn/help/gitlab-ce/" target="_blank" rel="noopener">参考</a></p><ol><li><p>信任 GitLab 的 GPG 公钥:</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl https://packages.gitlab.com/gpg.key 2&gt; /dev/null | sudo apt-key add - &amp;&gt;/dev/null<br></code></pre></td></tr></table></figure></li><li><p>设置源</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /etc/apt/sources.list.d<br>vim gitlab-ce.list<br></code></pre></td></tr></table></figure></li><li><p>编辑gitlab-ce.list 输入以下内容</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">deb https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu/ bionic main<br></code></pre></td></tr></table></figure></li><li><p>更新并安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get update<br>sudo apt-get install gitlab-ce<br></code></pre></td></tr></table></figure></li><li><p>配置gitlab</p><p> 由于gitlab要用到域名，所以需要准备好域名。由于我是用虚拟机搭建，所以公共域名用不了，所以我就自己搭建了一个域名服务。可以参考可选步骤，搭建私有DNS服务器。</p><p> 配置文件是 <code>/etc/gitlab/gitlab.rb</code> 文件，因为文件内容过多，就简单的把会用到的配置列出来</p><ol><li><p>域名，这个设计到了gitlab系统自动生成的链接，所以必须修改为<strong>自己的域名</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"># external_url &apos;http://gitlab.explme.com&apos;<br>external_url &apos;http://kirno.com&apos;<br></code></pre></td></tr></table></figure></li><li><p>配置时区，由于默认是UTC，导致使用的时候时间不正确，所以需要修改为本地的时区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"># gitlab_rails[&apos;time_zone&apos;] = &apos;UTC&apos;<br>gitlab_rails[&apos;time_zone&apos;] = &apos;Asia/Shanghai&apos;<br></code></pre></td></tr></table></figure></li><li><p>邮件，由于gitlab会通过邮箱找回密码或者认证，所以需要配置。原本是使用系统自己的邮件系统，但是我不会配置，所以就是用了QQ邮箱作为发送方</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs undefined">gitlab_rails[&apos;smtp_enable&apos;] = true<br>gitlab_rails[&apos;smtp_address&apos;] = &quot;smtp.qq.com&quot;<br>gitlab_rails[&apos;smtp_port&apos;] = 465<br># 发送方的邮箱完整地址 xx@qq.com<br>gitlab_rails[&apos;smtp_user_name&apos;] = &quot;XXX&quot;<br># 这里是发送方的QQ邮箱地址，也就是和上面的一样<br>gitlab_rails[&apos;gitlab_email_from&apos;] = &apos;XXX&apos;<br># 密码，注意这里要使用QQ邮箱的 授权码 不是密码，可以在设置，账户处找到<br>gitlab_rails[&apos;smtp_password&apos;] = &quot;xxx&quot;    <br>gitlab_rails[&apos;smtp_domain&apos;] = &quot;smtp.qq.com&quot;<br>gitlab_rails[&apos;smtp_authentication&apos;] = &quot;login&quot;<br>gitlab_rails[&apos;smtp_enable_starttls_auto&apos;] = true<br>gitlab_rails[&apos;smtp_tls&apos;] = true<br></code></pre></td></tr></table></figure></li></ol></li></ol><p>配置完成后初始化 gitlab 时间比较久</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gitlab-ctl reconfigure<br></code></pre></td></tr></table></figure><p>可以通过以下命令测试邮件</p><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入控制台</span><br>gitlab-rails console<br><span class="hljs-comment"># 发送邮件</span><br>Notify.test_email(<span class="hljs-string">"收件人邮箱"</span>, <span class="hljs-string">"标题"</span>, <span class="hljs-string">"内容"</span>).deliver_now<br></code></pre></td></tr></table></figure></code></pre><p>然后就可以在浏览器通过域名访问了</p><h2 id="汉化教程"><a href="#汉化教程" class="headerlink" title="汉化教程"></a>汉化教程</h2><p>默认的gitlab是英文，可以选择进行汉化，不过其实汉化并不完整。</p><ol><li><p><a href="https://gitlab.com/xhang/gitlab/tags" target="_blank" rel="noopener">下载汉化文件</a> 文件比较大在 48m+ 左右，而且下载比较慢，所以建议下载完拉上服务器。</p><blockquote><p>一定要注意版本，已安装的gitlab版本可以通过 <code>cat /opt/gitlab/embedded/service/gitlab-rails/VERSION</code> 命令查看</p></blockquote></li><li><p>下载完之后解压，通过 <code>cat gitlab/VERSION</code> 查看是版本是否匹配，如果版本不匹配可能会导致gitlab崩溃，所以小心</p></li><li><p>停止gitlab</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">gitlab-ctl stop<br></code></pre></td></tr></table></figure><ol start="3"><li>覆盖 </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cp -rf gitlab/* /opt/gitlab/embedded/service/gitlab-rails/<br></code></pre></td></tr></table></figure><ol start="4"><li>重新配置gitlab并启动它</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gitlab-ctl reconfigure<br>gitlab-ctl restart<br></code></pre></td></tr></table></figure><h2 id="使用现有的Nginx作为服务器"><a href="#使用现有的Nginx作为服务器" class="headerlink" title="使用现有的Nginx作为服务器"></a>使用现有的Nginx作为服务器</h2><p>这个地方巨坑，真的是巨坑，被卡在这里太久了😭。<br>首先通过apt-get或者从官网下载的nginx，如果没有注意的话都不行，因为他们默认都不支持 <code>Passenger</code> 这是个巨坑啊，多少次因为这个摔鼠标了🖱️。虽然网上有教程通过 passenger-install-nginx-modules 的方式来重新安装nginx，但是这个的编译过程贼慢，我的双核4g云服务器完全卡死在这了，所以不推荐。还有的办法就是通过利用 <code>nginx 1.9</code> 以上的版本的动态模块加载功能来实现。</p><ol><li>安装 <code>ruby</code> 没办法，passenger依赖 <code>ruby</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install ruby<br></code></pre></td></tr></table></figure><ol start="2"><li>安装 <code>passenger</code> 安装这个东西最好换源，否则巨慢</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">换源</span><br>gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/<br><span class="hljs-meta">$</span><span class="bash"> gem sources -l</span><br>https://gems.ruby-china.com<br><span class="hljs-meta">#</span><span class="bash"> 确保只有 gems.ruby-china.com</span><br><span class="hljs-meta"><br>#</span><span class="bash">安装</span><br>gem install passenger<br></code></pre></td></tr></table></figure><ol start="3"><li>下载nginx源码，编译模块，<a href="https://www.phusionpassenger.com/library/install/nginx/install_as_nginx_module.html" target="_blank" rel="noopener">参考</a></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /path-to-nginx-source-dir<br>./configure --prefix=/opt/nginx \<br>  --add-dynamic-module=$(passenger-config --nginx-addon-dir) \<br>  --add-module=/path-to-some-other-nginx-module<br>make<br>sudo make install<br></code></pre></td></tr></table></figure><ol start="4"><li>配置现有的nginx的配置文件 <code>nginx.conf</code>, 添加</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs nginx">#user  nobody;<br>worker_processes  1;<br><br>#============重点================================<br>load_module modules/ngx_http_passenger_module.so;<br>#===============================================<br><br>events &#123;<br>    worker_connections  1024;<br>&#125;<br><br><br>http &#123;<br>    include       mime.types;<br>    default_type  application/octet-stream;<br><br>    #============重点===如果忘记passenger的目录了，可以通过 passenger-config --root 指令来获取=============================<br>    passenger_root /var/lib/gems/2.3.0/gems/passenger-5.3.3;<br>    #===============================================<br><br>    sendfile        on;<br><br>    keepalive_timeout  65;<br>    ...<br></code></pre></td></tr></table></figure><ol start="5"><li>重中之重，这里最坑，配置了好了<code>nginx</code>之后报了一个奇葩🤮的错误</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">2018/07/10 10:44:19 [crit] 28138#0: *3739 connect() to unix:/tmp/passenger.uPSo3Mj/agents.s/core failed (2: No such file or directory) while connecting to upstream, client: 119.127.17.115, server: xxx, request: &quot;GET / HTTP/1.1&quot;, upstream: &quot;passenger:unix:/tmp/passenger.uPSo3Mj/agents.s/core:&quot;, host: &quot;xxx&quot;<br></code></pre></td></tr></table></figure><p>这个地方浪费了我一个下午加半个早上🌞，多次想放弃，网上还找不到资料。其实解决也很简单，就是重启nginx，不能简单的<code>nginx -s reload</code> 或者 <code>nginx -s reopen</code> 的重启，没有效果的，必须要先 <code>kill</code> 了nginx的进程然后再重新运行 <code>nginx</code> 才行😭。为了解决这个问题，我重装了gitlab，各种百度，谷歌，差点就去看gitlab源码了😭。手抖重启ngxin后成功看到<code>/tmp</code>下创建<code>passenger.xxx</code>文件，太开心了。然后刷新页面果然成功</p><ol start="6"><li>一定要记住配置 <code>passenger_root /var/lib/gems/2.3.0/gems/passenger-5.3.3;</code> 否则也会出现403错误</li></ol><p><img src="http://oepv0v7je.bkt.clouddn.com/18-7-10/20173328.jpg" alt="成功图"></p><h2 id="可选-搭建私有DNS服务器"><a href="#可选-搭建私有DNS服务器" class="headerlink" title="(可选)搭建私有DNS服务器"></a>(可选)搭建私有DNS服务器</h2><p>网上基本都是 <code>bind9</code> 的教程，所以我也就使用它来搭建。</p><p>首先安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install bind9<br></code></pre></td></tr></table></figure><p>安装了之后，有几个路径需要了解</p><ul><li>/etc/bind 用于存放主要的配置文件</li><li>/var/cache/bind 用于存放域名相关的配置文件</li></ul><p>比如我要创建一个 <code>kirno.com</code> 的域名</p><p>首先编辑 <code>/etc/bind/named.conf.local</code> 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">// 这里的 kirno.com 就是想要创建的域名<br>zone &quot;kirno.com&quot; &#123;    <br>    type master;<br><br>    // 这个对应着 /var/cache/bind 里面的解析配置文件的名字<br>    file &quot;db.kirno.com&quot;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>然后把 <code>/etc/bind</code> 目录下的解析配置模板 <code>db.local</code> 复制到 <code>/var/cache/bind</code> 里面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cp /etc/<span class="hljs-built_in">bind</span>/db.local.com /var/cache/<span class="hljs-built_in">bind</span>/db.kirno.com<br></code></pre></td></tr></table></figure><p>编辑 <code>/var/cache/bind/db.kirno.com</code> 把其中的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">@INA127.0.0.1<br></code></pre></td></tr></table></figure><p>改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">@INA192.168.2.100<br></code></pre></td></tr></table></figure><blockquote><p>其中 <code>192.168.2.100</code> 是你想解析的域名对应着的ip</p></blockquote><p>最后编辑 <code>/etc/bind/named.conf.options</code> 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs undefined">options &#123;<br>directory &quot;/var/cache/bind&quot;;<br><br>// If there is a firewall between you and nameservers you want<br>// to talk to, you may need to fix the firewall to allow multiple<br>// ports to talk.  See http://www.kb.cert.org/vuls/id/800113<br><br>// If your ISP provided one or more IP addresses for stable <br>// nameservers, you probably want to use them as forwarders.  <br>// Uncomment the following block, and insert the addresses replacing <br>// the all-0&apos;s placeholder.<br><br>forwarders &#123;<br> 223.5.5.5;<br>&#125;;<br><br>//========================================================================<br>// If BIND logs error messages about the root key being expired,<br>// you will need to update your keys.  See https://www.isc.org/bind-keys<br>//========================================================================<br>dnssec-validation auto;<br><br>auth-nxdomain no;    # conform to RFC1035<br>listen-on-v6 &#123; any; &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>其中 <code>223.5.5.5</code> 是阿里云的DNS，这里的意思其实是如果本地找不到相应的域名，就会交给第三方DNS服务器处理,所以改成任意的可使用的第三方域名服务器即可。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> gitlab </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bt搜索脚本</title>
      <link href="/2018/06/19/cjxzoi3lv000ajcu9u1ib83jl/"/>
      <url>/2018/06/19/cjxzoi3lv000ajcu9u1ib83jl/</url>
      
        <content type="html"><![CDATA[<h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre><code class="javascript">javascript:pachong();<span class="function"><span class="keyword">function</span> <span class="title">pachong</span>(<span class="params"></span>) </span>{<span class="keyword">var</span> currentUrl = location.href;<span class="keyword">if</span> (currentUrl.indexOf(<span class="string">"http://sdkcloud.pro/"</span>) == <span class="number">-1</span>) {<span class="keyword">var</span> query = prompt(<span class="string">"请输入想要搜索的资源关键字"</span>);<span class="keyword">if</span>(query.trim()){<span class="keyword">var</span> sdkUrl = <span class="string">"http://sdkcloud.pro/xfs.php?s="</span>+query;location.href = sdkUrl;}} <span class="keyword">else</span> {addBtn();}}<span class="function"><span class="keyword">function</span> <span class="title">addBtn</span>(<span class="params"></span>)</span>{<span class="keyword">var</span> list = <span class="built_in">document</span>.querySelectorAll(<span class="string">".T1 a"</span>);list.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>{<span class="keyword">var</span> l = item.href;<span class="keyword">var</span> mag = l.substring(<span class="number">20</span>, l.length);<span class="keyword">var</span> url =  <span class="string">"https://apiv.ga/magnet/"</span>+mag;<span class="keyword">var</span> btn = <span class="string">"&lt;a style='margin-left:5px;text-decoration:none;border:1px solid #efefef;border-radius:4px;font-size:15px;padding:5px' href='"</span>+url+<span class="string">"' target='view_window'&gt;%E6%92%AD%E6%94%BE&lt;/a&gt;"</span>;item.innerHTML = item.innerHTML + btn;});}</code></pre><a id="more"></a><p>准备，</p><p>创建收藏夹，然后名字随便填写，网址填入上述脚本即可</p><p>chrome:</p><ol><li>打开书签管理器 <code>alt+ctr+B</code></li><li>添加网址</li><li>按照下图填写<br><img src="http://i4.buimg.com/567571/cbc2cc2efe423ace.png" alt></li></ol><p>其它浏览器类似，反正就是加入到收藏夹就可以了</p><p>使用方法</p><p>在任意网页点击，输入想要观看的资源，也可以是帮助协和社会更加和谐的资源</p><p><img src="http://i2.buimg.com/567571/056c5bde613f7c07.png" alt></p><p>然后会跳转到资源页面，在资源页面再点击一次</p><p><img src="http://i2.buimg.com/567571/a4b0f5a147a6c273.png" alt></p><p>点击播放即可</p><p><img src="http://i2.buimg.com/567571/4e3701e0b54b1d0e.png" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>通过源码来编译nginx</title>
      <link href="/2018/06/19/cjxzoi3mm000tjcu9k1a706ym/"/>
      <url>/2018/06/19/cjxzoi3mm000tjcu9k1a706ym/</url>
      
        <content type="html"><![CDATA[<p>使用配置参数进行编译。它定义了系统的各个方面,包含了nginx所允许的链接方法。配置后会生成一个 <code>Makefile</code> 文件. 以下是配置支持的参数:</p><p><code>--prefix=path</code> — 定义一个用于保存服务器的目录 This same directory will also be used for all relative paths set by configure (except for paths to libraries sources) and in the nginx.conf configuration file. It is set to the /usr/local/nginx directory by default.</p><p>–sbin-path=path — sets the name of an nginx executable file. This name is used only during installation. By default the file is named prefix/sbin/nginx.</p><p>–conf-path=path — sets the name of an nginx.conf configuration file. If needs be, nginx can always be started with a different configuration file, by specifying it in the command-line parameter -c file. By default the file is named prefix/conf/nginx.conf.<br><a id="more"></a><br>–pid-path=path — sets the name of an nginx.pid file that will store the process ID of the main process. After installation, the file name can always be changed in the nginx.conf configuration file using the pid directive. By default the file is named prefix/logs/nginx.pid.</p><p>–error-log-path=path — sets the name of the primary error, warnings, and diagnostic file. After installation, the file name can always be changed in the nginx.conf configuration file using the error_log directive. By default the file is named prefix/logs/error.log.</p><p>–http-log-path=path — sets the name of the primary request log file of the HTTP server. After installation, the file name can always be changed in the nginx.conf configuration file using the access_log directive. By default the file is named prefix/logs/access.log.</p><p>–build=name — sets an optional nginx build name.</p><p>–user=name — sets the name of an unprivileged user whose credentials will be used by worker processes. After installation, the name can always be changed in the nginx.conf configuration file using the user directive. The default user name is nobody.</p><p>–group=name — sets the name of a group whose credentials will be used by worker processes. After installation, the name can always be changed in the nginx.conf configuration file using the user directive. By default, a group name is set to the name of an unprivileged user.</p><p>–with-select_module<br>–without-select_module — enables or disables building a module that allows the server to work with the select() method. This module is built automatically if the platform does not appear to support more appropriate methods such as kqueue, epoll, or /dev/poll.</p><p>–with-poll_module<br>–without-poll_module — enables or disables building a module that allows the server to work with the poll() method. This module is built automatically if the platform does not appear to support more appropriate methods such as kqueue, epoll, or /dev/poll.</p><p>–without-http_gzip_module — disables building a module that compresses responses of an HTTP server. The zlib library is required to build and run this module.</p><p>–without-http_rewrite_module — disables building a module that allows an HTTP server to redirect requests and change URI of requests. The PCRE library is required to build and run this module.</p><p>–without-http_proxy_module — disables building an HTTP server proxying module.</p><p>–with-http_ssl_module — enables building a module that adds the HTTPS protocol support to an HTTP server. This module is not built by default. The OpenSSL library is required to build and run this module.</p><p>–with-pcre=path — sets the path to the sources of the PCRE library. The library distribution (version 4.4 — 8.40) needs to be downloaded from the PCRE site and extracted. The rest is done by nginx’s ./configure and make. The library is required for regular expressions support in the location directive and for the ngx_http_rewrite_module module.</p><p>–with-pcre-jit — builds the PCRE library with “just-in-time compilation” support (1.1.12, the pcre_jit directive).</p><p>–with-zlib=path — sets the path to the sources of the zlib library. The library distribution (version 1.1.3 — 1.2.11) needs to be downloaded from the zlib site and extracted. The rest is done by nginx’s ./configure and make. The library is required for the ngx_http_gzip_module module.</p><p>–with-cc-opt=parameters — sets additional parameters that will be added to the CFLAGS variable. When using the system PCRE library under FreeBSD, –with-cc-opt=”-I /usr/local/include” should be specified. If the number of files supported by select() needs to be increased it can also be specified here such as this: –with-cc-opt=”-D FD_SETSIZE=2048”.</p><p>–with-ld-opt=parameters — sets additional parameters that will be used during linking. When using the system PCRE library under FreeBSD, –with-ld-opt=”-L /usr/local/lib” should be specified.</p><p>Example of parameters usage (all of this needs to be typed in one line):</p><p>./configure<br>    –sbin-path=/usr/local/nginx/nginx<br>    –conf-path=/usr/local/nginx/nginx.conf<br>    –pid-path=/usr/local/nginx/nginx.pid<br>    –with-http_ssl_module<br>    –with-pcre=../pcre-8.40<br>    –with-zlib=../zlib-1.2.11<br>After configuration, nginx is compiled and installed using make.</p><p>./configure \<br>–prefix=/etc/nginx \<br>–add-dynamic-module=$(passenger-config –nginx-addon-dir) \<br>–with-openssl=/home/kirno/download/openssl-1.0.2o \<br>–with-pcre=/home/kirno/download/pcre-8.42 \<br>–with-zlib=/home/kirno/download/zlib-1.2.11 \<br>–with-http_ssl_module \<br>–with-threads \<br>–with-debug \<br>–with-http_v2_module</p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> 编译 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PL2303HX 的驱动安装</title>
      <link href="/2018/06/19/cjxzoi3lp0007jcu907zba8ep/"/>
      <url>/2018/06/19/cjxzoi3lp0007jcu907zba8ep/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于官方不再支持PL2303HX,所以就没有了win10上可用的官方驱动.有一个应该是民间高手的人补充了这个空白</p></blockquote><p><a href="http://www.ifamilysoftware.com/news37.html" target="_blank" rel="noopener">官网下载</a></p><p><a href="https://pan.baidu.com/s/1N33jAnw1XGreeLBNxHSpSA" target="_blank" rel="noopener">百度备份下载</a> 密码: t65v</p><p>下载完之后安装就可以了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node 远程调试</title>
      <link href="/2018/06/19/cjxzoi3mn000ujcu9y3o2mek4/"/>
      <url>/2018/06/19/cjxzoi3mn000ujcu9y3o2mek4/</url>
      
        <content type="html"><![CDATA[<ol><li><p>进入项目根目录，假如启动个文件在 <code>./bin/www</code> 这里。</p></li><li><p>命令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">node --inspect=0.0.0.0:3001 bin/www<br></code></pre></td></tr></table></figure><p> 其中 <code>0.0.0.0</code> 表示监听的Ip地址，全0 表示任意地方可以访问。3001 是访问端口 bin/www 就是程序的启动文件</p><a id="more"></a></li><li><p>打开 Chrome 输入地址 <code>chrome://inspect</code> </p><p> <img src="http://oepv0v7je.bkt.clouddn.com/18-3-9/66188112.jpg" alt></p><p> 选择 <code>Configure</code> 在弹出来的窗口输入 远程服务器的 IP 和 端口 然后 点击 <code>Done</code> 就可以了</p></li><li><p>等待以下出现</p><p> <img src="http://oepv0v7je.bkt.clouddn.com/18-3-9/2925952.jpg" alt></p><p> 点击 <code>inspect</code> 即可开始调试</p></li><li><p>进入 <code>source</code> 界面就可以断点了</p><p> <img src="http://oepv0v7je.bkt.clouddn.com/18-3-9/2879619.jpg" alt></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitHub库整理</title>
      <link href="/2018/06/19/cjxzoi3mk000rjcu9ksqxw501/"/>
      <url>/2018/06/19/cjxzoi3mk000rjcu9ksqxw501/</url>
      
        <content type="html"><![CDATA[<p><strong>javascript</strong></p><ol><li><p><a href="https://github.com/axios/axios" target="_blank" rel="noopener">axios</a> ⭐38,326</p><p>  javascript的 http client 库</p></li><li><p><a href="https://github.com/react-community/create-react-native-app" target="_blank" rel="noopener">create-react-native-app</a> ⭐8,843</p><p> 简介：辅助创建 react-native 程序</p><p> <a href="https://github.com/react-community/create-react-native-app/blob/master/react-native-scripts/template/README.md" target="_blank" rel="noopener">开发文档</a></p><a id="more"></a></li><li><p><a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">create-react-app</a> ⭐45,526</p><p> 简介: 辅助创建 react-app 程序</p><p> <a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#advanced-configuration" target="_blank" rel="noopener">开发文档</a></p></li><li><p><a href="https://github.com/nhnent/tui.editor" target="_blank" rel="noopener">tui.editor</a> ⭐5,989</p><p> 简介: markdown编译器</p><p> <a href="http://ui.toast.com/tui-editor/" target="_blank" rel="noopener">开发文档</a></p></li></ol><p><strong>android</strong></p><ol><li><p><a href="https://github.com/square/picasso" target="_blank" rel="noopener">picasso</a> ⭐15,153</p><p> 简介: 基于android的图片加载库</p><p> <a href="http://square.github.io/picasso/" target="_blank" rel="noopener">开发文档</a></p></li></ol><p><strong>python</strong></p><ol><li><p><a href="https://github.com/Prinsphield/Wechat_AutoJump" target="_blank" rel="noopener">Wechat_AutoJump</a> ⭐1,261</p><p> 简介: 跳一跳的python版本开挂程序，利用了图片识别和人工ai，值得学习</p><p> <a href="http://square.github.io/picasso/" target="_blank" rel="noopener">开发文档</a></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> gitHub </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>协议</title>
      <link href="/2018/06/19/cjxzoi3ms000yjcu9x1nd6sa9/"/>
      <url>/2018/06/19/cjxzoi3ms000yjcu9x1nd6sa9/</url>
      
        <content type="html"><![CDATA[<h1 id="2018年5月5日"><a href="#2018年5月5日" class="headerlink" title="2018年5月5日"></a>2018年5月5日</h1><h3 id="机台发送给客户端"><a href="#机台发送给客户端" class="headerlink" title="机台发送给客户端"></a>机台发送给客户端</h3><table><thead><tr><th>字段</th><th style="text-align:center">类型</th><th style="text-align:right">说明</th></tr></thead><tbody><tr><td>clientId</td><td style="text-align:center">string</td><td style="text-align:right">唯一识别码</td></tr><tr><td>col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td>col 3 is</td><td style="text-align:center">right-aligned</td><td style="text-align:right">$1</td></tr></tbody></table><ol><li><p>主题<code>zbc/client/death</code> 死亡主题:</p><p> 描述:    当客户端掉线的时候发送</p><p> 等级:  &gt;=1</p><p> 数据:</p></li></ol><table><thead><tr><th>字段</th><th>类型</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>clientId</td><td>string</td><td>唯一识别码</td><td>0201</td></tr></tbody></table><ol start="2"><li><p>主题 <code>zbc/client/login</code> 连接主题</p><p> 描述:    机台连接上来后发送</p><p> 等级:    &gt;=1</p><p> 数据:</p></li></ol><table><thead><tr><th>字段</th><th>类型</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>clientId</td><td>string</td><td>唯一识别码</td><td>0201</td></tr></tbody></table><a id="more"></a><ol start="3"><li><p>主题 <code>zbc/client/circle</code> 转圈主题</p><p> 描述:    每转一圈就发送一次数据到服务器</p><p> 等级:    &gt;=1</p><p> 数据:</p></li></ol><table><thead><tr><th>字段</th><th>类型</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>clientId</td><td>string</td><td>唯一识别码</td><td>0201</td></tr><tr><td>circle</td><td>number</td><td>转数</td><td>20</td></tr><tr><td>totalCircle</td><td>number</td><td>总转数</td><td>100</td></tr><tr><td>userId</td><td>string</td><td>操作员ID</td><td>sdfef</td></tr><tr><td>orderId</td><td>string</td><td>当前布票ID</td><td>dfdfdsdf</td></tr><tr><td>orderNum</td><td>number</td><td>落布数</td><td>10</td></tr></tbody></table><ol start="3"><li><p>主题 <code>zbc/client/ccd</code> 扫描条形码数据</p><p> 描述:    机台扫描二维码后发送给服务器</p><p> 等级:    &gt;=1</p><p> 数据:</p></li></ol><table><thead><tr><th>字段</th><th>类型</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>clientId</td><td>string</td><td>唯一识别码</td><td>0201</td></tr><tr><td>code</td><td>string</td><td>条形码数据</td><td>02215158</td></tr></tbody></table><hr><h3 id="服务端发送给机台"><a href="#服务端发送给机台" class="headerlink" title="服务端发送给机台"></a>服务端发送给机台</h3><ol><li><p>主题 <code>zbc/server/唯一识别码/changeUser</code> 更换操作员</p><p> 描述:    机台更换操作员</p><p> 等级:    &gt;=1</p><p> 数据:</p></li></ol><table><thead><tr><th>字段</th><th>类型</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>userName</td><td>string</td><td>操作员姓名</td><td>张三</td></tr><tr><td>userId</td><td>string</td><td>用户ID</td><td>26d51fd5f</td></tr></tbody></table><ol><li><p>主题 <code>zbc/server/唯一识别码/login</code> 机台历史数据</p><p> 描述:    机台登陆后,服务器发送给他历史数据,也就是断网前的数据</p><p> 等级:    &gt;=1</p><p> 数据:</p></li></ol><table><thead><tr><th>字段</th><th>类型</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>clientNum</td><td>string</td><td>机台号</td><td>001</td></tr><tr><td>circle</td><td>number</td><td>转数</td><td>20</td></tr><tr><td>totalCircle</td><td>number</td><td>总转数</td><td>100</td></tr><tr><td>userId</td><td>string</td><td>操作员ID</td><td>sdfef</td></tr><tr><td>userName</td><td>string</td><td>操作员姓名</td><td>张三</td></tr><tr><td>orderId</td><td>string</td><td>当前布票ID</td><td>dfdfdsdf</td></tr><tr><td>orderNum</td><td>number</td><td>落布数</td><td>10</td></tr></tbody></table><ol><li><p>主题 <code>zbc/server/唯一识别码/ccd</code> 布票数据</p><p> 描述:    机台CCD扫描后,服务端把布票数据发送给机台</p><p> 等级:    &gt;=1</p><p> 数据:</p></li></ol><table><thead><tr><th>字段</th><th>类型</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>orderNum</td><td>string</td><td>布票号</td><td>02123548</td></tr></tbody></table><ol><li><p>主题 <code>zbc/server/唯一识别码/init</code> 添加机台设备的时候发送</p><p> 描述:    添加设备的时候发一次给单片机,让单片机记录</p><p> 等级:    &gt;=1</p><p> 数据:</p></li></ol><table><thead><tr><th>字段</th><th>类型</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>clientNum</td><td>string</td><td>机台号</td><td>001</td></tr></tbody></table><ol><li><p>主题 <code>zbc/server/唯一识别码/error</code> 错误信息</p><p> 描述:    如果出现错误,服务端会把错误发送给机台</p><p> 等级:    &gt;=1</p><p> 数据:</p></li></ol><table><thead><tr><th>字段</th><th>类型</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>msg</td><td>string</td><td>错误信息</td><td>该员工已离职</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c#调用数据库之Dapper</title>
      <link href="/2018/06/19/cjxzoi3mu000zjcu9ihr07ysk/"/>
      <url>/2018/06/19/cjxzoi3mu000zjcu9ihr07ysk/</url>
      
        <content type="html"><![CDATA[<p>这里记录一下Dapper的使用方式，这个库有点像java的<code>mybatis</code>可以很方便的把查询出来的数据映射到对象上面去。</p><ol><li><p><strong>安装</strong></p><ol><li><p>通过 NetGet 就可以安装了，vs自带的一个包管理工具</p><p><img src="http://oepv0v7je.bkt.clouddn.com/18-3-6/97896696.jpg" alt></p><a id="more"></a></li></ol></li><li><strong>初始化</strong> <ol><li>通过</li></ol></li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> IDbConnection <span class="hljs-title">GetConnection</span>(<span class="hljs-params"></span>)</span><br>&#123;<br>    <span class="hljs-comment">// CONN_STR 这个是链接字符串，比如 postgresql 的链接字符串是</span><br>    <span class="hljs-comment">// private static string CONN_STR = "PORT=5432;DATABASE=test;HOST=localhost;PASSWORD=123456;USER ID=postgres";</span><br>    <span class="hljs-keyword">var</span> connection = <span class="hljs-keyword">new</span> NpgsqlConnection(CONN_STR);<br>    connection.Open();<br>    <span class="hljs-keyword">return</span> connection;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>使用<ol><li>查询一个</li></ol></li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SqlHelper</span><br>   &#123;<br>       <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">string</span> CONN_STR = <span class="hljs-string">"PORT=5432;DATABASE=test;HOST=localhost;PASSWORD=123456;USER ID=postgres"</span>;<br><br><br>       <span class="hljs-function"><span class="hljs-keyword">public</span> IDbConnection <span class="hljs-title">GetConnection</span>(<span class="hljs-params"></span>)</span><br>       &#123;<br><br>           <span class="hljs-keyword">var</span> connection = <span class="hljs-keyword">new</span> NpgsqlConnection(CONN_STR);<br><br>           connection.Open();<br><br><br>           <span class="hljs-keyword">return</span> connection;<br>       &#125;<br><br>       <span class="hljs-keyword">public</span> List&lt;T&gt; All&lt;T&gt;(<span class="hljs-keyword">string</span> sql)<br>       &#123;<br>           <span class="hljs-keyword">var</span> con = GetConnection();<br>           <span class="hljs-keyword">var</span> list = con.Query&lt;T&gt;(sql).ToList();<br>           con.Close();<br>           <span class="hljs-keyword">return</span> list;<br>       &#125;<br><br>       <span class="hljs-keyword">internal</span> List&lt;T&gt; All&lt;T&gt;(<span class="hljs-keyword">string</span> sql, <span class="hljs-keyword">object</span> p)<br>       &#123;<br>           <span class="hljs-keyword">var</span> con = GetConnection();<br>           <span class="hljs-keyword">var</span> list = con.Query&lt;T&gt;(sql, p).ToList();<br>           con.Close();<br>           <span class="hljs-keyword">return</span> list;<br>       &#125;<br><br>       <span class="hljs-keyword">internal</span> T First&lt;T&gt;(<span class="hljs-keyword">string</span> sql, <span class="hljs-keyword">object</span> p)<br>       &#123;<br>           <span class="hljs-keyword">var</span> con = GetConnection();<br>           <span class="hljs-keyword">var</span> first = con.QuerySingle&lt;T&gt;(sql, p);<br>           con.Close();<br>           <span class="hljs-keyword">return</span> first;<br>       &#125;<br><br>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">Add</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> sql, <span class="hljs-keyword">object</span> obj</span>)</span><br>       &#123;<br>           <span class="hljs-keyword">var</span> con = GetConnection();<br>           <span class="hljs-keyword">var</span> row = con.Execute(sql, obj);<br>           con.Close();<br>           <span class="hljs-keyword">return</span> row;<br>       &#125;<br><br>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> <span class="hljs-title">AddAndGetId</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> sql, <span class="hljs-keyword">object</span> obj</span>)</span><br>       &#123;<br>           <span class="hljs-keyword">var</span> con = GetConnection();<br>           <span class="hljs-keyword">var</span> row = con.Execute(sql, obj);<br>           <span class="hljs-keyword">if</span> (row != <span class="hljs-number">1</span>)<br>           &#123;<br>               con.Close();<br>               <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;<br>           &#125;<br>           <span class="hljs-keyword">const</span> <span class="hljs-keyword">string</span> sql2 = <span class="hljs-string">"select last_insert_id()"</span>;<br>           <span class="hljs-keyword">var</span> re = con.Query&lt;<span class="hljs-keyword">string</span>&gt;(sql2).ToArray();<br>           con.Close();<br>           <span class="hljs-keyword">return</span> re[<span class="hljs-number">0</span>];<br>       &#125;<br><br>       <span class="hljs-function"><span class="hljs-keyword">internal</span> <span class="hljs-keyword">int</span> <span class="hljs-title">Update</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> sql, <span class="hljs-keyword">object</span> worker</span>)</span><br>       &#123;<br>           <span class="hljs-keyword">var</span> con = GetConnection();<br>           <span class="hljs-keyword">var</span> row = con.Execute(sql, worker);<br>           con.Close();<br>           <span class="hljs-keyword">return</span> row;<br>       &#125;<br><br>       <span class="hljs-meta">#<span class="hljs-meta-keyword">region</span> 单例模式</span><br><br>       <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlHelper _instance;<br><br>       <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">SqlHelper</span>(<span class="hljs-params"></span>)</span><br>       &#123;<br>       &#125;<br><br>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlHelper <span class="hljs-title">GetInstance</span>(<span class="hljs-params"></span>)</span><br>       &#123;<br>           <span class="hljs-keyword">return</span> _instance ?? (_instance = <span class="hljs-keyword">new</span> SqlHelper());<br>       &#125;<br><br>       <span class="hljs-meta">#<span class="hljs-meta-keyword">endregion</span></span><br>   &#125;<br></code></pre></td></tr></table></figure><p>也比较简单，调用的时候</p><p><code>SqlHelper.getInstance().First&lt;Order&gt;(&quot;select * from order where id = @Id&quot;, new {Id = &quot;123456&quot;})</code></p><p>其中 Order 是实体类，对应着数据库的字段。</p><hr><p>以上是简单用法，下面的是复杂用法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">var</span> sql = <span class="hljs-string">"select * from user left join address where userId = @UserId"</span>;<br><span class="hljs-keyword">var</span> procedureList = con.Query&lt;User, Address, User&gt;(sql,<br>(user, address) =&gt;<br>&#123;<br>    user.address = address;<br>    <span class="hljs-keyword">return</span> user;<br>&#125;, <span class="hljs-keyword">new</span> &#123;UserId = <span class="hljs-string">"123456"</span>&#125;).ToList();<br></code></pre></td></tr></table></figure><p><code>IDbConnection</code>这是一个接口，里面有一个Query函数，这个函数接受多个泛型，至于多少个，与关联的表有关，比如 一个 用户<code>User</code> 有多个 地址<code>Address</code> ,那么第一个泛型就是用户，第二个泛型就是Address，第三个就是要返回的对象。然后再实现对象之间的关系。最后返回的对象就是一个填充过数据的对象了，非常好用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> Dapper </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
