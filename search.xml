<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>构建electron、typescript、react、antd应用</title>
      <link href="/2019/06/14/cjxmojfg6001eysu9s6jnsq4i/"/>
      <url>/2019/06/14/cjxmojfg6001eysu9s6jnsq4i/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这个研究了很旧，还没研究透，先记录，以免忘记</p></blockquote><h2 id="1-初始化react项目"><a href="#1-初始化react项目" class="headerlink" title="1. 初始化react项目"></a>1. 初始化react项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">create-react-app demo --typescript<br></code></pre></td></tr></table></figure><h2 id="2-添加相关依赖-表如下"><a href="#2-添加相关依赖-表如下" class="headerlink" title="2. 添加相关依赖, 表如下"></a>2. 添加相关依赖, 表如下</h2><table><thead><tr><th>包名</th><th>介绍</th><th>安装方式</th></tr></thead><tbody><tr><td><a href="https://electronjs.org/" target="_blank" rel="noopener">electron</a></td><td>关键包，构建electron应用必须</td><td>-D</td></tr><tr><td><a href="https://github.com/mackyle/sqlite" target="_blank" rel="noopener">sqlite3</a></td><td>数据库支持，需要存储数据的话，推荐这个</td><td>-P</td></tr><tr><td><a href="https://ant.design/docs/react/introduce-cn" target="_blank" rel="noopener">antd</a></td><td>蚂蚁金服提供的React框架</td><td>-P</td></tr><tr><td><a href="https://github.com/ReactTraining/react-router" target="_blank" rel="noopener">react-router-dom</a></td><td>提供路由支持</td><td>-P</td></tr><tr><td><a href="https://github.com/typeorm/typeorm" target="_blank" rel="noopener">typeorm</a></td><td>适用于Typescript的ORM支持</td><td>-P</td></tr><tr><td><a href="https://github.com/tealeg/xlsx" target="_blank" rel="noopener">xlsx</a></td><td>读取excel文件，也可以创建excel文件</td><td>-P</td></tr><tr><td><a href="https://github.com/sail-sail/ejsExcel" target="_blank" rel="noopener">ejsexcel</a></td><td>通过模板的方式生成excel文件</td><td>-P</td></tr><tr><td><a href="https://github.com/sindresorhus/electron-is-dev" target="_blank" rel="noopener">electron-is-dev</a></td><td>用于在逻辑中判断当前是否开发模式，因为打包后一些路径会变，<br>这个可以判断当前是否打包以便选择路径</td><td>-P</td></tr><tr><td><a href="https://github.com/megahertz/electron-log" target="_blank" rel="noopener">electron-log</a></td><td>日志支持</td><td>-P</td></tr><tr><td><a href="https://github.com/ashtuchkin/iconv-lite" target="_blank" rel="noopener">iconv-lite</a></td><td>添加更多编码支持，window蛋疼的不使用utf-8，<br>node又不支持GBK，所以需要这个</td><td>-P</td></tr><tr><td><a href="https://github.com/lodash/lodash" target="_blank" rel="noopener">lodash</a></td><td>著名的javascript工具库</td><td>-P</td></tr><tr><td><a href="https://github.com/moment/moment" target="_blank" rel="noopener">moment</a></td><td>时间处理库</td><td>-P</td></tr><tr><td><a href="https://github.com/timarney/react-app-rewired" target="_blank" rel="noopener">react-app-rewired</a></td><td>因为<code>create-react-app</code>的配置文件都是不对外透明的，<br>这个可以让<code>create-react-app</code> 加载的时候，额外对现有配置进行修改</td><td>-D</td></tr><tr><td><a href="https://github.com/arackaf/customize-cra" target="_blank" rel="noopener">customize-cra</a></td><td>配合<code>react-app-rewired</code> 来使用，快速写一下配置</td><td>-D</td></tr><tr><td><a href="https://github.com/electron/electron-rebuild" target="_blank" rel="noopener">electron-rebuild</a></td><td>一些需要需要根据系统编译的库，比如 <code>sqlite3</code> 如果直接安装会出现不兼容问题，<br>然后就会死活找不到这个库，通过这个可以根据现有的版本进行重新编译</td><td>-D</td></tr><tr><td><a href="https://github.com/electron-userland/electron-builder" target="_blank" rel="noopener">electron-builder</a></td><td>用于打包项目，生成安装包</td></tr></tbody></table><p>以上就是我这个项目用到的包，感谢 GitHub 这个开源平台，感觉包作者的大大们，谢谢！！！ :smile: </p><h2 id="3-配置项目需要的基础代码"><a href="#3-配置项目需要的基础代码" class="headerlink" title="3. 配置项目需要的基础代码"></a>3. 配置项目需要的基础代码</h2><ol><li>添加 <code>electron</code> 的入口文件 <code>/public/main.js</code> </li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Modules to control application life and create native browser window</span><br><span class="hljs-keyword">const</span> &#123; app, BrowserWindow, ipcMain &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>);<br><span class="hljs-keyword">const</span> isDev = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron-is-dev'</span>)<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>)<br><span class="hljs-keyword">const</span> log = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron-log'</span>);<br><span class="hljs-comment">// Keep a global reference of the window object, if you don't, the window will</span><br><span class="hljs-comment">// be closed automatically when the JavaScript object is garbage collected.</span><br><span class="hljs-keyword">let</span> mainWindow;<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createWindow</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-comment">// Create the browser window.</span><br>    mainWindow = <span class="hljs-keyword">new</span> BrowserWindow(&#123;<br>        <span class="hljs-attr">width</span>: <span class="hljs-number">1700</span>,<br>        <span class="hljs-attr">height</span>: <span class="hljs-number">1000</span>,<br>        <span class="hljs-attr">minHeight</span>: <span class="hljs-number">1000</span>,<br>        <span class="hljs-attr">minWidth</span>: <span class="hljs-number">1700</span>,<br>        <span class="hljs-attr">webPreferences</span>: &#123;<br>            <span class="hljs-attr">nodeIntegration</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">webSecurity</span>: <span class="hljs-literal">false</span>,<br>        &#125;,<br>        <span class="hljs-attr">autoHideMenuBar</span>: <span class="hljs-literal">true</span>,<br>    &#125;)<br><br>    <span class="hljs-comment">// 这里就是初始化的时候加载的页面，由于打包之后使用的是静态文件，开发时候使用的是服务器，所有这里要分开处理，electron-is-dev 库的重要性</span><br>    <span class="hljs-keyword">const</span> htmlUrl = <span class="hljs-string">`file://<span class="hljs-subst">$&#123;path.join(__dirname, <span class="hljs-string">'../build/index.html#login'</span>)&#125;</span>`</span>;<br>    <span class="hljs-keyword">const</span> url = isDev ? <span class="hljs-string">"http://127.0.0.1:3000#/login"</span> : htmlUrl;<br>    log.info(url);<br>    mainWindow.loadURL(url);<br>    <span class="hljs-comment">// 因为开发的时候 electron 虽然使用chrome内核，但是不没有任何chrmoe插件。开发React的时候最好有 React dev tools 插件，所以可以通过以下的方式来加载额外的插件，路径是插件安装在chrmoe的路径，有点难找，可以配合 Everything 来查找</span><br>    <span class="hljs-keyword">if</span> (isDev) &#123;<br>        BrowserWindow.addDevToolsExtension(<span class="hljs-string">'C:\\Users\\kirno\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Extensions\\fmkadmapgofadopljbjfkapdkoienihi\\3.6.0_0'</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// Open the DevTools.</span><br>    <span class="hljs-comment">// mainWindow.webContents.openDevTools()</span><br><br>    <span class="hljs-comment">// Emitted when the window is closed.</span><br>    mainWindow.on(<span class="hljs-string">'closed'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// Dereference the window object, usually you would store windows</span><br>        <span class="hljs-comment">// in an array if your app supports multi windows, this is the time</span><br>        <span class="hljs-comment">// when you should delete the corresponding element.</span><br>        mainWindow = <span class="hljs-literal">null</span><br>    &#125;)<br><span class="hljs-comment">// 这里线程间通信用的，electron 主要分为 主线程（浏览器）和渲染线程 (网页) 的形式运行，有些事情在网页里是比较难实现，就可以通过这种方式让浏览器帮你做。下面是实现获取系统打印机列表的功能</span><br>    ipcMain.on(<span class="hljs-string">'obtainPrinterList'</span>, (event) =&gt; &#123;<br>        <span class="hljs-keyword">const</span> printers = mainWindow.webContents.getPrinters();<br>        mainWindow.webContents.send(<span class="hljs-string">'getPrinterList'</span>, printers);<br>    &#125;);<br>&#125;<br><br><span class="hljs-comment">// This method will be called when Electron has finished</span><br><span class="hljs-comment">// initialization and is ready to create browser windows.</span><br><span class="hljs-comment">// Some APIs can only be used after this event occurs.</span><br>app.on(<span class="hljs-string">'ready'</span>, createWindow)<br><br><span class="hljs-comment">// Quit when all windows are closed.</span><br>app.on(<span class="hljs-string">'window-all-closed'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// On macOS it is common for applications and their menu bar</span><br>    <span class="hljs-comment">// to stay active until the user quits explicitly with Cmd + Q</span><br>    <span class="hljs-keyword">if</span> (process.platform !== <span class="hljs-string">'darwin'</span>) app.quit()<br>&#125;)<br><br>app.on(<span class="hljs-string">'activate'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// On macOS it's common to re-create a window in the app when the</span><br>    <span class="hljs-comment">// dock icon is clicked and there are no other windows open.</span><br>    <span class="hljs-keyword">if</span> (mainWindow === <span class="hljs-literal">null</span>) createWindow()<br>&#125;)<br><br><span class="hljs-comment">// In this file you can include the rest of your app's specific main process</span><br><span class="hljs-comment">// code. You can also put them in separate files and require them here.</span><br></code></pre></td></tr></table></figure><ol start="2"><li>在<code>package.json</code>文件中添加脚本，辅助开发，以下是节选内容</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>"scripts": &#123;<br>        "ele": "electron .",<br>        "pub": "build --publish always",<br>        /* 重新编译 */<br>        "rebuild": "electron-rebuild",<br>        /* 开发运行 */<br>        "start": "react-app-rewired start",<br>        "build": "react-app-rewired build",<br>        "test": "react-app-rewired test",<br>        "eject": "react-scripts eject",<br>        "postinstall": "electron-builder install-app-deps",        <br>        "buil": "electron-builder install-app-deps",<br>        "preelectron-pack": "yarn build",<br>        /* 打包 */<br>        "electron-dist": "build -w",<br>        /* 打包，但不生成安装包文件 */<br>        "electron-pack": "electron-builder --dir",<br>        "release": "build"<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来就可以进行开发了。以下记录几个问题</p><h2 id="typeorm-的问题"><a href="#typeorm-的问题" class="headerlink" title="typeorm 的问题"></a><code>typeorm</code> 的问题</h2><ol><li><p>无法找到 sqlite3 的包，原因可能有两个，一个是sqlite3直接安装后，和electron的版本不符合。可以通过 <code>electron-build</code> 库解决，重新编译即可；二是因为导入的方式不对，如果使用 </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123;xxxx&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'typeorm'</span><br></code></pre></td></tr></table></figure><p>的话，由于设计到c这种第三方底层库，然而 <code>electron</code> 的渲染线程是没有办法访问这种底层代码的，所以导致无法<code>typrorm</code> 底层无法调用成功，所以这里要借助 <code>electron</code> 的函数 <code>require</code> 方法来引入，实际上就是让 electron 来帮我们导包。但是如果使用 <code>require</code> 的方法来导包，就会失去 <code>typescript</code> 的类型优势，以下是解决方法：</p><ol><li><p>新建一个 <code>libary.js</code> 文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; getConnection, getRepository &#125; = <span class="hljs-built_in">window</span>.require(<span class="hljs-string">'typeorm'</span>);<br><span class="hljs-built_in">module</span>.exports = &#123; getConnection, getRepository &#125;<br></code></pre></td></tr></table></figure></li><li><p>新建 <code>libary.d.ts</code> 文件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">declare</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRepository</span>&lt;<span class="hljs-title">Entity</span>&gt;(<span class="hljs-params">entityClass: ObjectType&lt;Entity&gt; | EntitySchema&lt;Entity&gt; | <span class="hljs-built_in">string</span>, connectionName?: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">Repository</span>&lt;<span class="hljs-title">Entity</span>&gt;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">declare</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getConnection</span>(<span class="hljs-params">connectionName?: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">Connection</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>再要使用的地方引入</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; getRepository, getConnection &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'../libary'</span>;<br></code></pre></td></tr></table></figure></li></ol><p>即可，这里制作了两个常用方法的实例，其他方法也是这样引如。这样就不会丢失 类型。这个方法同样适用于引入 electron 对象。</p></li><li><p>打包问题，由于<code>webpack</code>会把所有引入的文件都进行打包，然而<code>typeorm</code>因为 要兼容多种数据库，所以底层会引入多中数据库的包，但是因为我们只用一种数据，其他的没有，所以打包的时候会报错。解决办法就是让 <code>webpack</code>不要打包那些多余没用到的库，在实际要用的时候再引入。</p><ol><li><p>由于 <code>create-react-app</code>的配置文件是赢藏的，所以通过 <a href="https://github.com/timarney/react-app-rewired" target="_blank" rel="noopener">react-app-rewired</a> 和 <a href="https://github.com/arackaf/customize-cra" target="_blank" rel="noopener">customize-cra</a> 配合修改，新建 <code>/config-overrides.js</code> 文件，以下还提到了两种打包目标模式，具体可以去<code>webpack</code>官网查看</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; addLessLoader, override, addWebpackExternals, fixBabelImports &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">'customize-cra'</span>);<br><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-attr">webpack</span>: override(<br>        <span class="hljs-comment">// 添加less支持</span><br>        addLessLoader(&#123;<br>            <span class="hljs-attr">javascriptEnabled</span>: <span class="hljs-literal">true</span>,<br>        &#125;),<br>        <span class="hljs-comment">// 重点： 取消不必要的库的打包</span><br>        addWebpackExternals(&#123;<br>            <span class="hljs-string">'pg'</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-string">'pg-hstore'</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-string">'mysql2'</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-string">'react-native-sqlite-storage'</span>: <span class="hljs-literal">true</span>,<br>        &#125;),<br>        <span class="hljs-comment">// 客户端使用 electron-renderer方式渲染</span><br>        (config) =&gt; &#123;<br>            config.target = <span class="hljs-string">"electron-renderer"</span>;<br>            <span class="hljs-keyword">return</span> config;<br>        &#125;,<br>        (config) =&gt; &#123;<br>            config.optimization.minimize = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">return</span> config;<br>        &#125;,<br>    ),<br>    <span class="hljs-comment">// 服务端使用 electron-main方式渲染</span><br>    devServer: <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>        config.target = <span class="hljs-string">"electron-main"</span>;<br>        <span class="hljs-keyword">return</span> config;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h2 id="路径问题"><a href="#路径问题" class="headerlink" title="路径问题"></a>路径问题</h2><p>由于打包版本和开发版本存在路径差异，所以需要引入 <code>electron-is-dev</code>包来判断当前的环境。</p><p>数据存储路径建议放大 <code>electron.app.getAppPath()</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> electron, typescript, react, antd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/01/27/cjxmojffp000sysu98kjnl70z/"/>
      <url>/2019/01/27/cjxmojffp000sysu98kjnl70z/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-11-04日记</title>
      <link href="/2018/11/05/cjxmojfff000hysu9pdjaxyut/"/>
      <url>/2018/11/05/cjxmojfff000hysu9pdjaxyut/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, ener password to read." />    <label for="pass">Welcome to my blog, ener password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018-11-03日记</title>
      <link href="/2018/11/05/cjxmojff20007ysu9gd0jtkv6/"/>
      <url>/2018/11/05/cjxmojff20007ysu9gd0jtkv6/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, ener password to read." />    <label for="pass">Welcome to my blog, ener password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018-11-02日记</title>
      <link href="/2018/11/02/cjxmojff6000aysu9x4zyeipb/"/>
      <url>/2018/11/02/cjxmojff6000aysu9x4zyeipb/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, ener password to read." />    <label for="pass">Welcome to my blog, ener password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018-11-01日记</title>
      <link href="/2018/11/01/cjxmojff00006ysu98x8zcez2/"/>
      <url>/2018/11/01/cjxmojff00006ysu98x8zcez2/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, ener password to read." />    <label for="pass">Welcome to my blog, ener password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018-10-31日记</title>
      <link href="/2018/11/01/cjxmojfey0005ysu903omkrlx/"/>
      <url>/2018/11/01/cjxmojfey0005ysu903omkrlx/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, ener password to read." />    <label for="pass">Welcome to my blog, ener password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018-10-29日记</title>
      <link href="/2018/10/30/cjxmojfel0000ysu93h301zby/"/>
      <url>/2018/10/30/cjxmojfel0000ysu93h301zby/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, ener password to read." />    <label for="pass">Welcome to my blog, ener password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018-10-30日记</title>
      <link href="/2018/10/30/cjxmojfet0002ysu964psh40y/"/>
      <url>/2018/10/30/cjxmojfet0002ysu964psh40y/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, ener password to read." />    <label for="pass">Welcome to my blog, ener password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dnsCheck</title>
      <link href="/2018/07/10/cjxmojff8000cysu95ovi8fec/"/>
      <url>/2018/07/10/cjxmojff8000cysu95ovi8fec/</url>
      
        <content type="html"><![CDATA[<p>使用dig命令进行检测。<br>运行 dig 主机记录命令进行检测或者运行 dig 主机记录 @8.8.8.8命令指定使用谷歌DNS进行验证。例如， dig txt b.aliyuntest.com @8.8.8.8。<br><img src="http://oepv0v7je.bkt.clouddn.com/18-7-10/92556404.jpg" alt><br>如果返回结果中存在类似图示中的TXT记录，且记录值与订单进度页面中的记录值一致，表示您的DNS配置正确且已生效；如果记录值不同，请按照订单进度页面中的记录值在DNS域名解析服务商处更新该验证记录。<br>如果返回结果中不存在TXT记录，可能是DNS配置有误或者配置未生效。如配置错误，请按照订单进度页面中的配置要求在DNS域名解析服务商处重新配置；如果配置长时间未生效，请联系域名托管商。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令</title>
      <link href="/2018/07/02/cjxmojffl000oysu9o4qo7zaz/"/>
      <url>/2018/07/02/cjxmojffl000oysu9o4qo7zaz/</url>
      
        <content type="html"><![CDATA[<ol><li>查看apt-get下载的软件的位置</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>gitlab安装教程</title>
      <link href="/2018/06/28/cjxmojfg4001dysu9qgdw4w25/"/>
      <url>/2018/06/28/cjxmojfg4001dysu9qgdw4w25/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一片关于GitLab的安装教程以及踩过的坑</p></blockquote><p>浪费了一个下午的时间，终于把Gitlab搭建完成，搭建环境如下：</p><ul><li><p>系统（虚拟机）</p><p>  Distributor ID:    Ubuntu</p><p>  Description:    Ubuntu 18.04 LTS</p><p>  Release:    18.04</p><p>  Codename:    bionic</p></li><li><p>gitlab V11.0.1</p></li></ul><a id="more"></a><h2 id="安装Gitlab"><a href="#安装Gitlab" class="headerlink" title="安装Gitlab"></a>安装Gitlab</h2><p>这里有一个问题，gitlab官方源太慢了，一个gitlab安装包要<code>500M+</code>如果直接下载，很容易挂掉，或者等很久，所以这里要替换源。不过似乎在阿里云上搭载的话，会很快，不用更换。</p><p>这里推荐 <a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">清华大学开源软件镜像站</a> 里面有不少的镜像源，其中就包括了gitlab的。</p><p>具体地址是</p><pre><code>deb http://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu bionic main</code></pre><blockquote><p>注意其中 <code>bionic</code> 是系统代号，比如我的ubuntu 18 代号就是 <code>bionic</code> 其他的系统可以使用 <code>lsb_relase</code> 命令自行查询。</p></blockquote><p><strong>使用方法</strong> <a href="https://mirrors.tuna.tsinghua.edu.cn/help/gitlab-ce/" target="_blank" rel="noopener">参考</a></p><ol><li><p>信任 GitLab 的 GPG 公钥:</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl https://packages.gitlab.com/gpg.key 2&gt; /dev/null | sudo apt-key add - &amp;&gt;/dev/null<br></code></pre></td></tr></table></figure></li><li><p>设置源</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /etc/apt/sources.list.d<br>vim gitlab-ce.list<br></code></pre></td></tr></table></figure></li><li><p>编辑gitlab-ce.list 输入以下内容</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">deb https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu/ bionic main<br></code></pre></td></tr></table></figure></li><li><p>更新并安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get update<br>sudo apt-get install gitlab-ce<br></code></pre></td></tr></table></figure></li><li><p>配置gitlab</p><p> 由于gitlab要用到域名，所以需要准备好域名。由于我是用虚拟机搭建，所以公共域名用不了，所以我就自己搭建了一个域名服务。可以参考可选步骤，搭建私有DNS服务器。</p><p> 配置文件是 <code>/etc/gitlab/gitlab.rb</code> 文件，因为文件内容过多，就简单的把会用到的配置列出来</p><ol><li><p>域名，这个设计到了gitlab系统自动生成的链接，所以必须修改为<strong>自己的域名</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"># external_url &apos;http://gitlab.explme.com&apos;<br>external_url &apos;http://kirno.com&apos;<br></code></pre></td></tr></table></figure></li><li><p>配置时区，由于默认是UTC，导致使用的时候时间不正确，所以需要修改为本地的时区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"># gitlab_rails[&apos;time_zone&apos;] = &apos;UTC&apos;<br>gitlab_rails[&apos;time_zone&apos;] = &apos;Asia/Shanghai&apos;<br></code></pre></td></tr></table></figure></li><li><p>邮件，由于gitlab会通过邮箱找回密码或者认证，所以需要配置。原本是使用系统自己的邮件系统，但是我不会配置，所以就是用了QQ邮箱作为发送方</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs undefined">gitlab_rails[&apos;smtp_enable&apos;] = true<br>gitlab_rails[&apos;smtp_address&apos;] = &quot;smtp.qq.com&quot;<br>gitlab_rails[&apos;smtp_port&apos;] = 465<br># 发送方的邮箱完整地址 xx@qq.com<br>gitlab_rails[&apos;smtp_user_name&apos;] = &quot;XXX&quot;<br># 这里是发送方的QQ邮箱地址，也就是和上面的一样<br>gitlab_rails[&apos;gitlab_email_from&apos;] = &apos;XXX&apos;<br># 密码，注意这里要使用QQ邮箱的 授权码 不是密码，可以在设置，账户处找到<br>gitlab_rails[&apos;smtp_password&apos;] = &quot;xxx&quot;    <br>gitlab_rails[&apos;smtp_domain&apos;] = &quot;smtp.qq.com&quot;<br>gitlab_rails[&apos;smtp_authentication&apos;] = &quot;login&quot;<br>gitlab_rails[&apos;smtp_enable_starttls_auto&apos;] = true<br>gitlab_rails[&apos;smtp_tls&apos;] = true<br></code></pre></td></tr></table></figure></li></ol></li></ol><p>配置完成后初始化 gitlab 时间比较久</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gitlab-ctl reconfigure<br></code></pre></td></tr></table></figure><p>可以通过以下命令测试邮件</p><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入控制台</span><br>gitlab-rails console<br><span class="hljs-comment"># 发送邮件</span><br>Notify.test_email(<span class="hljs-string">"收件人邮箱"</span>, <span class="hljs-string">"标题"</span>, <span class="hljs-string">"内容"</span>).deliver_now<br></code></pre></td></tr></table></figure></code></pre><p>然后就可以在浏览器通过域名访问了</p><h2 id="汉化教程"><a href="#汉化教程" class="headerlink" title="汉化教程"></a>汉化教程</h2><p>默认的gitlab是英文，可以选择进行汉化，不过其实汉化并不完整。</p><ol><li><p><a href="https://gitlab.com/xhang/gitlab/tags" target="_blank" rel="noopener">下载汉化文件</a> 文件比较大在 48m+ 左右，而且下载比较慢，所以建议下载完拉上服务器。</p><blockquote><p>一定要注意版本，已安装的gitlab版本可以通过 <code>cat /opt/gitlab/embedded/service/gitlab-rails/VERSION</code> 命令查看</p></blockquote></li><li><p>下载完之后解压，通过 <code>cat gitlab/VERSION</code> 查看是版本是否匹配，如果版本不匹配可能会导致gitlab崩溃，所以小心</p></li><li><p>停止gitlab</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">gitlab-ctl stop<br></code></pre></td></tr></table></figure><ol start="3"><li>覆盖 </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cp -rf gitlab/* /opt/gitlab/embedded/service/gitlab-rails/<br></code></pre></td></tr></table></figure><ol start="4"><li>重新配置gitlab并启动它</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gitlab-ctl reconfigure<br>gitlab-ctl restart<br></code></pre></td></tr></table></figure><h2 id="使用现有的Nginx作为服务器"><a href="#使用现有的Nginx作为服务器" class="headerlink" title="使用现有的Nginx作为服务器"></a>使用现有的Nginx作为服务器</h2><p>这个地方巨坑，真的是巨坑，被卡在这里太久了😭。<br>首先通过apt-get或者从官网下载的nginx，如果没有注意的话都不行，因为他们默认都不支持 <code>Passenger</code> 这是个巨坑啊，多少次因为这个摔鼠标了🖱️。虽然网上有教程通过 passenger-install-nginx-modules 的方式来重新安装nginx，但是这个的编译过程贼慢，我的双核4g云服务器完全卡死在这了，所以不推荐。还有的办法就是通过利用 <code>nginx 1.9</code> 以上的版本的动态模块加载功能来实现。</p><ol><li>安装 <code>ruby</code> 没办法，passenger依赖 <code>ruby</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install ruby<br></code></pre></td></tr></table></figure><ol start="2"><li>安装 <code>passenger</code> 安装这个东西最好换源，否则巨慢</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">换源</span><br>gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/<br><span class="hljs-meta">$</span><span class="bash"> gem sources -l</span><br>https://gems.ruby-china.com<br><span class="hljs-meta">#</span><span class="bash"> 确保只有 gems.ruby-china.com</span><br><span class="hljs-meta"><br>#</span><span class="bash">安装</span><br>gem install passenger<br></code></pre></td></tr></table></figure><ol start="3"><li>下载nginx源码，编译模块，<a href="https://www.phusionpassenger.com/library/install/nginx/install_as_nginx_module.html" target="_blank" rel="noopener">参考</a></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /path-to-nginx-source-dir<br>./configure --prefix=/opt/nginx \<br>  --add-dynamic-module=$(passenger-config --nginx-addon-dir) \<br>  --add-module=/path-to-some-other-nginx-module<br>make<br>sudo make install<br></code></pre></td></tr></table></figure><ol start="4"><li>配置现有的nginx的配置文件 <code>nginx.conf</code>, 添加</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs nginx">#user  nobody;<br>worker_processes  1;<br><br>#============重点================================<br>load_module modules/ngx_http_passenger_module.so;<br>#===============================================<br><br>events &#123;<br>    worker_connections  1024;<br>&#125;<br><br><br>http &#123;<br>    include       mime.types;<br>    default_type  application/octet-stream;<br><br>    #============重点===如果忘记passenger的目录了，可以通过 passenger-config --root 指令来获取=============================<br>    passenger_root /var/lib/gems/2.3.0/gems/passenger-5.3.3;<br>    #===============================================<br><br>    sendfile        on;<br><br>    keepalive_timeout  65;<br>    ...<br></code></pre></td></tr></table></figure><ol start="5"><li>重中之重，这里最坑，配置了好了<code>nginx</code>之后报了一个奇葩🤮的错误</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">2018/07/10 10:44:19 [crit] 28138#0: *3739 connect() to unix:/tmp/passenger.uPSo3Mj/agents.s/core failed (2: No such file or directory) while connecting to upstream, client: 119.127.17.115, server: xxx, request: &quot;GET / HTTP/1.1&quot;, upstream: &quot;passenger:unix:/tmp/passenger.uPSo3Mj/agents.s/core:&quot;, host: &quot;xxx&quot;<br></code></pre></td></tr></table></figure><p>这个地方浪费了我一个下午加半个早上🌞，多次想放弃，网上还找不到资料。其实解决也很简单，就是重启nginx，不能简单的<code>nginx -s reload</code> 或者 <code>nginx -s reopen</code> 的重启，没有效果的，必须要先 <code>kill</code> 了nginx的进程然后再重新运行 <code>nginx</code> 才行😭。为了解决这个问题，我重装了gitlab，各种百度，谷歌，差点就去看gitlab源码了😭。手抖重启ngxin后成功看到<code>/tmp</code>下创建<code>passenger.xxx</code>文件，太开心了。然后刷新页面果然成功</p><ol start="6"><li>一定要记住配置 <code>passenger_root /var/lib/gems/2.3.0/gems/passenger-5.3.3;</code> 否则也会出现403错误</li></ol><p><img src="http://oepv0v7je.bkt.clouddn.com/18-7-10/20173328.jpg" alt="成功图"></p><h2 id="可选-搭建私有DNS服务器"><a href="#可选-搭建私有DNS服务器" class="headerlink" title="(可选)搭建私有DNS服务器"></a>(可选)搭建私有DNS服务器</h2><p>网上基本都是 <code>bind9</code> 的教程，所以我也就使用它来搭建。</p><p>首先安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install bind9<br></code></pre></td></tr></table></figure><p>安装了之后，有几个路径需要了解</p><ul><li>/etc/bind 用于存放主要的配置文件</li><li>/var/cache/bind 用于存放域名相关的配置文件</li></ul><p>比如我要创建一个 <code>kirno.com</code> 的域名</p><p>首先编辑 <code>/etc/bind/named.conf.local</code> 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">// 这里的 kirno.com 就是想要创建的域名<br>zone &quot;kirno.com&quot; &#123;    <br>    type master;<br><br>    // 这个对应着 /var/cache/bind 里面的解析配置文件的名字<br>    file &quot;db.kirno.com&quot;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>然后把 <code>/etc/bind</code> 目录下的解析配置模板 <code>db.local</code> 复制到 <code>/var/cache/bind</code> 里面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cp /etc/<span class="hljs-built_in">bind</span>/db.local.com /var/cache/<span class="hljs-built_in">bind</span>/db.kirno.com<br></code></pre></td></tr></table></figure><p>编辑 <code>/var/cache/bind/db.kirno.com</code> 把其中的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">@INA127.0.0.1<br></code></pre></td></tr></table></figure><p>改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">@INA192.168.2.100<br></code></pre></td></tr></table></figure><blockquote><p>其中 <code>192.168.2.100</code> 是你想解析的域名对应着的ip</p></blockquote><p>最后编辑 <code>/etc/bind/named.conf.options</code> 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs undefined">options &#123;<br>directory &quot;/var/cache/bind&quot;;<br><br>// If there is a firewall between you and nameservers you want<br>// to talk to, you may need to fix the firewall to allow multiple<br>// ports to talk.  See http://www.kb.cert.org/vuls/id/800113<br><br>// If your ISP provided one or more IP addresses for stable <br>// nameservers, you probably want to use them as forwarders.  <br>// Uncomment the following block, and insert the addresses replacing <br>// the all-0&apos;s placeholder.<br><br>forwarders &#123;<br> 223.5.5.5;<br>&#125;;<br><br>//========================================================================<br>// If BIND logs error messages about the root key being expired,<br>// you will need to update your keys.  See https://www.isc.org/bind-keys<br>//========================================================================<br>dnssec-validation auto;<br><br>auth-nxdomain no;    # conform to RFC1035<br>listen-on-v6 &#123; any; &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>其中 <code>223.5.5.5</code> 是阿里云的DNS，这里的意思其实是如果本地找不到相应的域名，就会交给第三方DNS服务器处理,所以改成任意的可使用的第三方域名服务器即可。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> gitlab </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bt搜索脚本</title>
      <link href="/2018/06/19/cjxmojffi000kysu9geof1af7/"/>
      <url>/2018/06/19/cjxmojffi000kysu9geof1af7/</url>
      
        <content type="html"><![CDATA[<h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre><code class="javascript">javascript:pachong();<span class="function"><span class="keyword">function</span> <span class="title">pachong</span>(<span class="params"></span>) </span>{<span class="keyword">var</span> currentUrl = location.href;<span class="keyword">if</span> (currentUrl.indexOf(<span class="string">"http://sdkcloud.pro/"</span>) == <span class="number">-1</span>) {<span class="keyword">var</span> query = prompt(<span class="string">"请输入想要搜索的资源关键字"</span>);<span class="keyword">if</span>(query.trim()){<span class="keyword">var</span> sdkUrl = <span class="string">"http://sdkcloud.pro/xfs.php?s="</span>+query;location.href = sdkUrl;}} <span class="keyword">else</span> {addBtn();}}<span class="function"><span class="keyword">function</span> <span class="title">addBtn</span>(<span class="params"></span>)</span>{<span class="keyword">var</span> list = <span class="built_in">document</span>.querySelectorAll(<span class="string">".T1 a"</span>);list.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>{<span class="keyword">var</span> l = item.href;<span class="keyword">var</span> mag = l.substring(<span class="number">20</span>, l.length);<span class="keyword">var</span> url =  <span class="string">"https://apiv.ga/magnet/"</span>+mag;<span class="keyword">var</span> btn = <span class="string">"&lt;a style='margin-left:5px;text-decoration:none;border:1px solid #efefef;border-radius:4px;font-size:15px;padding:5px' href='"</span>+url+<span class="string">"' target='view_window'&gt;%E6%92%AD%E6%94%BE&lt;/a&gt;"</span>;item.innerHTML = item.innerHTML + btn;});}</code></pre><a id="more"></a><p>准备，</p><p>创建收藏夹，然后名字随便填写，网址填入上述脚本即可</p><p>chrome:</p><ol><li>打开书签管理器 <code>alt+ctr+B</code></li><li>添加网址</li><li>按照下图填写<br><img src="http://i4.buimg.com/567571/cbc2cc2efe423ace.png" alt></li></ol><p>其它浏览器类似，反正就是加入到收藏夹就可以了</p><p>使用方法</p><p>在任意网页点击，输入想要观看的资源，也可以是帮助协和社会更加和谐的资源</p><p><img src="http://i2.buimg.com/567571/056c5bde613f7c07.png" alt></p><p>然后会跳转到资源页面，在资源页面再点击一次</p><p><img src="http://i2.buimg.com/567571/a4b0f5a147a6c273.png" alt></p><p>点击播放即可</p><p><img src="http://i2.buimg.com/567571/4e3701e0b54b1d0e.png" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>通过源码来编译nginx</title>
      <link href="/2018/06/19/cjxmojffq000tysu91f77xcx6/"/>
      <url>/2018/06/19/cjxmojffq000tysu91f77xcx6/</url>
      
        <content type="html"><![CDATA[<p>使用配置参数进行编译。它定义了系统的各个方面,包含了nginx所允许的链接方法。配置后会生成一个 <code>Makefile</code> 文件. 以下是配置支持的参数:</p><p><code>--prefix=path</code> — 定义一个用于保存服务器的目录 This same directory will also be used for all relative paths set by configure (except for paths to libraries sources) and in the nginx.conf configuration file. It is set to the /usr/local/nginx directory by default.</p><p>–sbin-path=path — sets the name of an nginx executable file. This name is used only during installation. By default the file is named prefix/sbin/nginx.</p><p>–conf-path=path — sets the name of an nginx.conf configuration file. If needs be, nginx can always be started with a different configuration file, by specifying it in the command-line parameter -c file. By default the file is named prefix/conf/nginx.conf.<br><a id="more"></a><br>–pid-path=path — sets the name of an nginx.pid file that will store the process ID of the main process. After installation, the file name can always be changed in the nginx.conf configuration file using the pid directive. By default the file is named prefix/logs/nginx.pid.</p><p>–error-log-path=path — sets the name of the primary error, warnings, and diagnostic file. After installation, the file name can always be changed in the nginx.conf configuration file using the error_log directive. By default the file is named prefix/logs/error.log.</p><p>–http-log-path=path — sets the name of the primary request log file of the HTTP server. After installation, the file name can always be changed in the nginx.conf configuration file using the access_log directive. By default the file is named prefix/logs/access.log.</p><p>–build=name — sets an optional nginx build name.</p><p>–user=name — sets the name of an unprivileged user whose credentials will be used by worker processes. After installation, the name can always be changed in the nginx.conf configuration file using the user directive. The default user name is nobody.</p><p>–group=name — sets the name of a group whose credentials will be used by worker processes. After installation, the name can always be changed in the nginx.conf configuration file using the user directive. By default, a group name is set to the name of an unprivileged user.</p><p>–with-select_module<br>–without-select_module — enables or disables building a module that allows the server to work with the select() method. This module is built automatically if the platform does not appear to support more appropriate methods such as kqueue, epoll, or /dev/poll.</p><p>–with-poll_module<br>–without-poll_module — enables or disables building a module that allows the server to work with the poll() method. This module is built automatically if the platform does not appear to support more appropriate methods such as kqueue, epoll, or /dev/poll.</p><p>–without-http_gzip_module — disables building a module that compresses responses of an HTTP server. The zlib library is required to build and run this module.</p><p>–without-http_rewrite_module — disables building a module that allows an HTTP server to redirect requests and change URI of requests. The PCRE library is required to build and run this module.</p><p>–without-http_proxy_module — disables building an HTTP server proxying module.</p><p>–with-http_ssl_module — enables building a module that adds the HTTPS protocol support to an HTTP server. This module is not built by default. The OpenSSL library is required to build and run this module.</p><p>–with-pcre=path — sets the path to the sources of the PCRE library. The library distribution (version 4.4 — 8.40) needs to be downloaded from the PCRE site and extracted. The rest is done by nginx’s ./configure and make. The library is required for regular expressions support in the location directive and for the ngx_http_rewrite_module module.</p><p>–with-pcre-jit — builds the PCRE library with “just-in-time compilation” support (1.1.12, the pcre_jit directive).</p><p>–with-zlib=path — sets the path to the sources of the zlib library. The library distribution (version 1.1.3 — 1.2.11) needs to be downloaded from the zlib site and extracted. The rest is done by nginx’s ./configure and make. The library is required for the ngx_http_gzip_module module.</p><p>–with-cc-opt=parameters — sets additional parameters that will be added to the CFLAGS variable. When using the system PCRE library under FreeBSD, –with-cc-opt=”-I /usr/local/include” should be specified. If the number of files supported by select() needs to be increased it can also be specified here such as this: –with-cc-opt=”-D FD_SETSIZE=2048”.</p><p>–with-ld-opt=parameters — sets additional parameters that will be used during linking. When using the system PCRE library under FreeBSD, –with-ld-opt=”-L /usr/local/lib” should be specified.</p><p>Example of parameters usage (all of this needs to be typed in one line):</p><p>./configure<br>    –sbin-path=/usr/local/nginx/nginx<br>    –conf-path=/usr/local/nginx/nginx.conf<br>    –pid-path=/usr/local/nginx/nginx.pid<br>    –with-http_ssl_module<br>    –with-pcre=../pcre-8.40<br>    –with-zlib=../zlib-1.2.11<br>After configuration, nginx is compiled and installed using make.</p><p>./configure \<br>–prefix=/etc/nginx \<br>–add-dynamic-module=$(passenger-config –nginx-addon-dir) \<br>–with-openssl=/home/kirno/download/openssl-1.0.2o \<br>–with-pcre=/home/kirno/download/pcre-8.42 \<br>–with-zlib=/home/kirno/download/zlib-1.2.11 \<br>–with-http_ssl_module \<br>–with-threads \<br>–with-debug \<br>–with-http_v2_module</p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> 编译 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PL2303HX 的驱动安装</title>
      <link href="/2018/06/19/cjxmojffa000fysu9e5cfl25a/"/>
      <url>/2018/06/19/cjxmojffa000fysu9e5cfl25a/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于官方不再支持PL2303HX,所以就没有了win10上可用的官方驱动.有一个应该是民间高手的人补充了这个空白</p></blockquote><p><a href="http://www.ifamilysoftware.com/news37.html" target="_blank" rel="noopener">官网下载</a></p><p><a href="https://pan.baidu.com/s/1N33jAnw1XGreeLBNxHSpSA" target="_blank" rel="noopener">百度备份下载</a> 密码: t65v</p><p>下载完之后安装就可以了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node 远程调试</title>
      <link href="/2018/06/19/cjxmojffo000rysu9jqc920pi/"/>
      <url>/2018/06/19/cjxmojffo000rysu9jqc920pi/</url>
      
        <content type="html"><![CDATA[<ol><li><p>进入项目根目录，假如启动个文件在 <code>./bin/www</code> 这里。</p></li><li><p>命令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">node --inspect=0.0.0.0:3001 bin/www<br></code></pre></td></tr></table></figure><p> 其中 <code>0.0.0.0</code> 表示监听的Ip地址，全0 表示任意地方可以访问。3001 是访问端口 bin/www 就是程序的启动文件</p><a id="more"></a></li><li><p>打开 Chrome 输入地址 <code>chrome://inspect</code> </p><p> <img src="http://oepv0v7je.bkt.clouddn.com/18-3-9/66188112.jpg" alt></p><p> 选择 <code>Configure</code> 在弹出来的窗口输入 远程服务器的 IP 和 端口 然后 点击 <code>Done</code> 就可以了</p></li><li><p>等待以下出现</p><p> <img src="http://oepv0v7je.bkt.clouddn.com/18-3-9/2925952.jpg" alt></p><p> 点击 <code>inspect</code> 即可开始调试</p></li><li><p>进入 <code>source</code> 界面就可以断点了</p><p> <img src="http://oepv0v7je.bkt.clouddn.com/18-3-9/2879619.jpg" alt></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitHub库整理</title>
      <link href="/2018/06/19/cjxmojffk000mysu9jb9miknt/"/>
      <url>/2018/06/19/cjxmojffk000mysu9jb9miknt/</url>
      
        <content type="html"><![CDATA[<p><strong>javascript</strong></p><ol><li><p><a href="https://github.com/axios/axios" target="_blank" rel="noopener">axios</a> ⭐38,326</p><p>  javascript的 http client 库</p></li><li><p><a href="https://github.com/react-community/create-react-native-app" target="_blank" rel="noopener">create-react-native-app</a> ⭐8,843</p><p> 简介：辅助创建 react-native 程序</p><p> <a href="https://github.com/react-community/create-react-native-app/blob/master/react-native-scripts/template/README.md" target="_blank" rel="noopener">开发文档</a></p><a id="more"></a></li><li><p><a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">create-react-app</a> ⭐45,526</p><p> 简介: 辅助创建 react-app 程序</p><p> <a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#advanced-configuration" target="_blank" rel="noopener">开发文档</a></p></li><li><p><a href="https://github.com/nhnent/tui.editor" target="_blank" rel="noopener">tui.editor</a> ⭐5,989</p><p> 简介: markdown编译器</p><p> <a href="http://ui.toast.com/tui-editor/" target="_blank" rel="noopener">开发文档</a></p></li></ol><p><strong>android</strong></p><ol><li><p><a href="https://github.com/square/picasso" target="_blank" rel="noopener">picasso</a> ⭐15,153</p><p> 简介: 基于android的图片加载库</p><p> <a href="http://square.github.io/picasso/" target="_blank" rel="noopener">开发文档</a></p></li></ol><p><strong>python</strong></p><ol><li><p><a href="https://github.com/Prinsphield/Wechat_AutoJump" target="_blank" rel="noopener">Wechat_AutoJump</a> ⭐1,261</p><p> 简介: 跳一跳的python版本开挂程序，利用了图片识别和人工ai，值得学习</p><p> <a href="http://square.github.io/picasso/" target="_blank" rel="noopener">开发文档</a></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> gitHub </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>协议</title>
      <link href="/2018/06/19/cjxmojffs000vysu9quebggob/"/>
      <url>/2018/06/19/cjxmojffs000vysu9quebggob/</url>
      
        <content type="html"><![CDATA[<h1 id="2018年5月5日"><a href="#2018年5月5日" class="headerlink" title="2018年5月5日"></a>2018年5月5日</h1><h3 id="机台发送给客户端"><a href="#机台发送给客户端" class="headerlink" title="机台发送给客户端"></a>机台发送给客户端</h3><table><thead><tr><th>字段</th><th style="text-align:center">类型</th><th style="text-align:right">说明</th></tr></thead><tbody><tr><td>clientId</td><td style="text-align:center">string</td><td style="text-align:right">唯一识别码</td></tr><tr><td>col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td>col 3 is</td><td style="text-align:center">right-aligned</td><td style="text-align:right">$1</td></tr></tbody></table><ol><li><p>主题<code>zbc/client/death</code> 死亡主题:</p><p> 描述:    当客户端掉线的时候发送</p><p> 等级:  &gt;=1</p><p> 数据:</p></li></ol><table><thead><tr><th>字段</th><th>类型</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>clientId</td><td>string</td><td>唯一识别码</td><td>0201</td></tr></tbody></table><ol start="2"><li><p>主题 <code>zbc/client/login</code> 连接主题</p><p> 描述:    机台连接上来后发送</p><p> 等级:    &gt;=1</p><p> 数据:</p></li></ol><table><thead><tr><th>字段</th><th>类型</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>clientId</td><td>string</td><td>唯一识别码</td><td>0201</td></tr></tbody></table><a id="more"></a><ol start="3"><li><p>主题 <code>zbc/client/circle</code> 转圈主题</p><p> 描述:    每转一圈就发送一次数据到服务器</p><p> 等级:    &gt;=1</p><p> 数据:</p></li></ol><table><thead><tr><th>字段</th><th>类型</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>clientId</td><td>string</td><td>唯一识别码</td><td>0201</td></tr><tr><td>circle</td><td>number</td><td>转数</td><td>20</td></tr><tr><td>totalCircle</td><td>number</td><td>总转数</td><td>100</td></tr><tr><td>userId</td><td>string</td><td>操作员ID</td><td>sdfef</td></tr><tr><td>orderId</td><td>string</td><td>当前布票ID</td><td>dfdfdsdf</td></tr><tr><td>orderNum</td><td>number</td><td>落布数</td><td>10</td></tr></tbody></table><ol start="3"><li><p>主题 <code>zbc/client/ccd</code> 扫描条形码数据</p><p> 描述:    机台扫描二维码后发送给服务器</p><p> 等级:    &gt;=1</p><p> 数据:</p></li></ol><table><thead><tr><th>字段</th><th>类型</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>clientId</td><td>string</td><td>唯一识别码</td><td>0201</td></tr><tr><td>code</td><td>string</td><td>条形码数据</td><td>02215158</td></tr></tbody></table><hr><h3 id="服务端发送给机台"><a href="#服务端发送给机台" class="headerlink" title="服务端发送给机台"></a>服务端发送给机台</h3><ol><li><p>主题 <code>zbc/server/唯一识别码/changeUser</code> 更换操作员</p><p> 描述:    机台更换操作员</p><p> 等级:    &gt;=1</p><p> 数据:</p></li></ol><table><thead><tr><th>字段</th><th>类型</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>userName</td><td>string</td><td>操作员姓名</td><td>张三</td></tr><tr><td>userId</td><td>string</td><td>用户ID</td><td>26d51fd5f</td></tr></tbody></table><ol><li><p>主题 <code>zbc/server/唯一识别码/login</code> 机台历史数据</p><p> 描述:    机台登陆后,服务器发送给他历史数据,也就是断网前的数据</p><p> 等级:    &gt;=1</p><p> 数据:</p></li></ol><table><thead><tr><th>字段</th><th>类型</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>clientNum</td><td>string</td><td>机台号</td><td>001</td></tr><tr><td>circle</td><td>number</td><td>转数</td><td>20</td></tr><tr><td>totalCircle</td><td>number</td><td>总转数</td><td>100</td></tr><tr><td>userId</td><td>string</td><td>操作员ID</td><td>sdfef</td></tr><tr><td>userName</td><td>string</td><td>操作员姓名</td><td>张三</td></tr><tr><td>orderId</td><td>string</td><td>当前布票ID</td><td>dfdfdsdf</td></tr><tr><td>orderNum</td><td>number</td><td>落布数</td><td>10</td></tr></tbody></table><ol><li><p>主题 <code>zbc/server/唯一识别码/ccd</code> 布票数据</p><p> 描述:    机台CCD扫描后,服务端把布票数据发送给机台</p><p> 等级:    &gt;=1</p><p> 数据:</p></li></ol><table><thead><tr><th>字段</th><th>类型</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>orderNum</td><td>string</td><td>布票号</td><td>02123548</td></tr></tbody></table><ol><li><p>主题 <code>zbc/server/唯一识别码/init</code> 添加机台设备的时候发送</p><p> 描述:    添加设备的时候发一次给单片机,让单片机记录</p><p> 等级:    &gt;=1</p><p> 数据:</p></li></ol><table><thead><tr><th>字段</th><th>类型</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>clientNum</td><td>string</td><td>机台号</td><td>001</td></tr></tbody></table><ol><li><p>主题 <code>zbc/server/唯一识别码/error</code> 错误信息</p><p> 描述:    如果出现错误,服务端会把错误发送给机台</p><p> 等级:    &gt;=1</p><p> 数据:</p></li></ol><table><thead><tr><th>字段</th><th>类型</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>msg</td><td>string</td><td>错误信息</td><td>该员工已离职</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c#调用数据库之Dapper</title>
      <link href="/2018/06/19/cjxmojfft000wysu9b68aagt1/"/>
      <url>/2018/06/19/cjxmojfft000wysu9b68aagt1/</url>
      
        <content type="html"><![CDATA[<p>这里记录一下Dapper的使用方式，这个库有点像java的<code>mybatis</code>可以很方便的把查询出来的数据映射到对象上面去。</p><ol><li><p><strong>安装</strong></p><ol><li><p>通过 NetGet 就可以安装了，vs自带的一个包管理工具</p><p><img src="http://oepv0v7je.bkt.clouddn.com/18-3-6/97896696.jpg" alt></p><a id="more"></a></li></ol></li><li><strong>初始化</strong> <ol><li>通过</li></ol></li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> IDbConnection <span class="hljs-title">GetConnection</span>(<span class="hljs-params"></span>)</span><br>&#123;<br>    <span class="hljs-comment">// CONN_STR 这个是链接字符串，比如 postgresql 的链接字符串是</span><br>    <span class="hljs-comment">// private static string CONN_STR = "PORT=5432;DATABASE=test;HOST=localhost;PASSWORD=123456;USER ID=postgres";</span><br>    <span class="hljs-keyword">var</span> connection = <span class="hljs-keyword">new</span> NpgsqlConnection(CONN_STR);<br>    connection.Open();<br>    <span class="hljs-keyword">return</span> connection;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>使用<ol><li>查询一个</li></ol></li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SqlHelper</span><br>   &#123;<br>       <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">string</span> CONN_STR = <span class="hljs-string">"PORT=5432;DATABASE=test;HOST=localhost;PASSWORD=123456;USER ID=postgres"</span>;<br><br><br>       <span class="hljs-function"><span class="hljs-keyword">public</span> IDbConnection <span class="hljs-title">GetConnection</span>(<span class="hljs-params"></span>)</span><br>       &#123;<br><br>           <span class="hljs-keyword">var</span> connection = <span class="hljs-keyword">new</span> NpgsqlConnection(CONN_STR);<br><br>           connection.Open();<br><br><br>           <span class="hljs-keyword">return</span> connection;<br>       &#125;<br><br>       <span class="hljs-keyword">public</span> List&lt;T&gt; All&lt;T&gt;(<span class="hljs-keyword">string</span> sql)<br>       &#123;<br>           <span class="hljs-keyword">var</span> con = GetConnection();<br>           <span class="hljs-keyword">var</span> list = con.Query&lt;T&gt;(sql).ToList();<br>           con.Close();<br>           <span class="hljs-keyword">return</span> list;<br>       &#125;<br><br>       <span class="hljs-keyword">internal</span> List&lt;T&gt; All&lt;T&gt;(<span class="hljs-keyword">string</span> sql, <span class="hljs-keyword">object</span> p)<br>       &#123;<br>           <span class="hljs-keyword">var</span> con = GetConnection();<br>           <span class="hljs-keyword">var</span> list = con.Query&lt;T&gt;(sql, p).ToList();<br>           con.Close();<br>           <span class="hljs-keyword">return</span> list;<br>       &#125;<br><br>       <span class="hljs-keyword">internal</span> T First&lt;T&gt;(<span class="hljs-keyword">string</span> sql, <span class="hljs-keyword">object</span> p)<br>       &#123;<br>           <span class="hljs-keyword">var</span> con = GetConnection();<br>           <span class="hljs-keyword">var</span> first = con.QuerySingle&lt;T&gt;(sql, p);<br>           con.Close();<br>           <span class="hljs-keyword">return</span> first;<br>       &#125;<br><br>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">Add</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> sql, <span class="hljs-keyword">object</span> obj</span>)</span><br>       &#123;<br>           <span class="hljs-keyword">var</span> con = GetConnection();<br>           <span class="hljs-keyword">var</span> row = con.Execute(sql, obj);<br>           con.Close();<br>           <span class="hljs-keyword">return</span> row;<br>       &#125;<br><br>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> <span class="hljs-title">AddAndGetId</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> sql, <span class="hljs-keyword">object</span> obj</span>)</span><br>       &#123;<br>           <span class="hljs-keyword">var</span> con = GetConnection();<br>           <span class="hljs-keyword">var</span> row = con.Execute(sql, obj);<br>           <span class="hljs-keyword">if</span> (row != <span class="hljs-number">1</span>)<br>           &#123;<br>               con.Close();<br>               <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;<br>           &#125;<br>           <span class="hljs-keyword">const</span> <span class="hljs-keyword">string</span> sql2 = <span class="hljs-string">"select last_insert_id()"</span>;<br>           <span class="hljs-keyword">var</span> re = con.Query&lt;<span class="hljs-keyword">string</span>&gt;(sql2).ToArray();<br>           con.Close();<br>           <span class="hljs-keyword">return</span> re[<span class="hljs-number">0</span>];<br>       &#125;<br><br>       <span class="hljs-function"><span class="hljs-keyword">internal</span> <span class="hljs-keyword">int</span> <span class="hljs-title">Update</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> sql, <span class="hljs-keyword">object</span> worker</span>)</span><br>       &#123;<br>           <span class="hljs-keyword">var</span> con = GetConnection();<br>           <span class="hljs-keyword">var</span> row = con.Execute(sql, worker);<br>           con.Close();<br>           <span class="hljs-keyword">return</span> row;<br>       &#125;<br><br>       <span class="hljs-meta">#<span class="hljs-meta-keyword">region</span> 单例模式</span><br><br>       <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlHelper _instance;<br><br>       <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">SqlHelper</span>(<span class="hljs-params"></span>)</span><br>       &#123;<br>       &#125;<br><br>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlHelper <span class="hljs-title">GetInstance</span>(<span class="hljs-params"></span>)</span><br>       &#123;<br>           <span class="hljs-keyword">return</span> _instance ?? (_instance = <span class="hljs-keyword">new</span> SqlHelper());<br>       &#125;<br><br>       <span class="hljs-meta">#<span class="hljs-meta-keyword">endregion</span></span><br>   &#125;<br></code></pre></td></tr></table></figure><p>也比较简单，调用的时候</p><p><code>SqlHelper.getInstance().First&lt;Order&gt;(&quot;select * from order where id = @Id&quot;, new {Id = &quot;123456&quot;})</code></p><p>其中 Order 是实体类，对应着数据库的字段。</p><hr><p>以上是简单用法，下面的是复杂用法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">var</span> sql = <span class="hljs-string">"select * from user left join address where userId = @UserId"</span>;<br><span class="hljs-keyword">var</span> procedureList = con.Query&lt;User, Address, User&gt;(sql,<br>(user, address) =&gt;<br>&#123;<br>    user.address = address;<br>    <span class="hljs-keyword">return</span> user;<br>&#125;, <span class="hljs-keyword">new</span> &#123;UserId = <span class="hljs-string">"123456"</span>&#125;).ToList();<br></code></pre></td></tr></table></figure><p><code>IDbConnection</code>这是一个接口，里面有一个Query函数，这个函数接受多个泛型，至于多少个，与关联的表有关，比如 一个 用户<code>User</code> 有多个 地址<code>Address</code> ,那么第一个泛型就是用户，第二个泛型就是Address，第三个就是要返回的对象。然后再实现对象之间的关系。最后返回的对象就是一个填充过数据的对象了，非常好用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> Dapper </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
